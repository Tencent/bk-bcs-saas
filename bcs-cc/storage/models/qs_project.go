// Code generated by go-queryset. DO NOT EDIT.
package models

import (
	"errors"
	"fmt"
	"time"

	"github.com/jinzhu/gorm"
)

// ===== BEGIN of all query sets

// ===== BEGIN of query set ProjectQuerySet

// ProjectQuerySet is an queryset type for Project
type ProjectQuerySet struct {
	db *gorm.DB
}

// NewProjectQuerySet constructs new ProjectQuerySet
func NewProjectQuerySet(db *gorm.DB) ProjectQuerySet {
	return ProjectQuerySet{
		db: db.Model(&Project{}),
	}
}

func (qs ProjectQuerySet) w(db *gorm.DB) ProjectQuerySet {
	return NewProjectQuerySet(db)
}

// Create is an autogenerated method
// nolint: dupl
func (o *Project) Create(db *gorm.DB) error {
	return db.Create(o).Error
}

// Delete is an autogenerated method
// nolint: dupl
func (o *Project) Delete(db *gorm.DB) error {
	return db.Delete(o).Error
}

// All is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) All(ret *[]Project) error {
	return qs.db.Find(ret).Error
}

// ApprovalStatusEq is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) ApprovalStatusEq(approvalStatus uint) ProjectQuerySet {
	return qs.w(qs.db.Where("approval_status = ?", approvalStatus))
}

// ApprovalStatusGt is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) ApprovalStatusGt(approvalStatus uint) ProjectQuerySet {
	return qs.w(qs.db.Where("approval_status > ?", approvalStatus))
}

// ApprovalStatusGte is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) ApprovalStatusGte(approvalStatus uint) ProjectQuerySet {
	return qs.w(qs.db.Where("approval_status >= ?", approvalStatus))
}

// ApprovalStatusIn is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) ApprovalStatusIn(approvalStatus ...uint) ProjectQuerySet {
	if len(approvalStatus) == 0 {
		qs.db.AddError(errors.New("must at least pass one approvalStatus in ApprovalStatusIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("approval_status IN (?)", approvalStatus))
}

// ApprovalStatusLt is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) ApprovalStatusLt(approvalStatus uint) ProjectQuerySet {
	return qs.w(qs.db.Where("approval_status < ?", approvalStatus))
}

// ApprovalStatusLte is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) ApprovalStatusLte(approvalStatus uint) ProjectQuerySet {
	return qs.w(qs.db.Where("approval_status <= ?", approvalStatus))
}

// ApprovalStatusNe is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) ApprovalStatusNe(approvalStatus uint) ProjectQuerySet {
	return qs.w(qs.db.Where("approval_status != ?", approvalStatus))
}

// ApprovalStatusNotIn is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) ApprovalStatusNotIn(approvalStatus ...uint) ProjectQuerySet {
	if len(approvalStatus) == 0 {
		qs.db.AddError(errors.New("must at least pass one approvalStatus in ApprovalStatusNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("approval_status NOT IN (?)", approvalStatus))
}

// ApprovalTimeEq is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) ApprovalTimeEq(approvalTime time.Time) ProjectQuerySet {
	return qs.w(qs.db.Where("approval_time = ?", approvalTime))
}

// ApprovalTimeGt is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) ApprovalTimeGt(approvalTime time.Time) ProjectQuerySet {
	return qs.w(qs.db.Where("approval_time > ?", approvalTime))
}

// ApprovalTimeGte is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) ApprovalTimeGte(approvalTime time.Time) ProjectQuerySet {
	return qs.w(qs.db.Where("approval_time >= ?", approvalTime))
}

// ApprovalTimeLt is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) ApprovalTimeLt(approvalTime time.Time) ProjectQuerySet {
	return qs.w(qs.db.Where("approval_time < ?", approvalTime))
}

// ApprovalTimeLte is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) ApprovalTimeLte(approvalTime time.Time) ProjectQuerySet {
	return qs.w(qs.db.Where("approval_time <= ?", approvalTime))
}

// ApprovalTimeNe is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) ApprovalTimeNe(approvalTime time.Time) ProjectQuerySet {
	return qs.w(qs.db.Where("approval_time != ?", approvalTime))
}

// ApproverEq is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) ApproverEq(approver string) ProjectQuerySet {
	return qs.w(qs.db.Where("approver = ?", approver))
}

// ApproverIn is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) ApproverIn(approver ...string) ProjectQuerySet {
	if len(approver) == 0 {
		qs.db.AddError(errors.New("must at least pass one approver in ApproverIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("approver IN (?)", approver))
}

// ApproverNe is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) ApproverNe(approver string) ProjectQuerySet {
	return qs.w(qs.db.Where("approver != ?", approver))
}

// ApproverNotIn is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) ApproverNotIn(approver ...string) ProjectQuerySet {
	if len(approver) == 0 {
		qs.db.AddError(errors.New("must at least pass one approver in ApproverNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("approver NOT IN (?)", approver))
}

// BGIDEq is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) BGIDEq(bGID uint) ProjectQuerySet {
	return qs.w(qs.db.Where("bg_id = ?", bGID))
}

// BGIDGt is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) BGIDGt(bGID uint) ProjectQuerySet {
	return qs.w(qs.db.Where("bg_id > ?", bGID))
}

// BGIDGte is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) BGIDGte(bGID uint) ProjectQuerySet {
	return qs.w(qs.db.Where("bg_id >= ?", bGID))
}

// BGIDIn is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) BGIDIn(bGID ...uint) ProjectQuerySet {
	if len(bGID) == 0 {
		qs.db.AddError(errors.New("must at least pass one bGID in BGIDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("bg_id IN (?)", bGID))
}

// BGIDLt is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) BGIDLt(bGID uint) ProjectQuerySet {
	return qs.w(qs.db.Where("bg_id < ?", bGID))
}

// BGIDLte is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) BGIDLte(bGID uint) ProjectQuerySet {
	return qs.w(qs.db.Where("bg_id <= ?", bGID))
}

// BGIDNe is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) BGIDNe(bGID uint) ProjectQuerySet {
	return qs.w(qs.db.Where("bg_id != ?", bGID))
}

// BGIDNotIn is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) BGIDNotIn(bGID ...uint) ProjectQuerySet {
	if len(bGID) == 0 {
		qs.db.AddError(errors.New("must at least pass one bGID in BGIDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("bg_id NOT IN (?)", bGID))
}

// BGNameEq is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) BGNameEq(bGName string) ProjectQuerySet {
	return qs.w(qs.db.Where("bg_name = ?", bGName))
}

// BGNameIn is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) BGNameIn(bGName ...string) ProjectQuerySet {
	if len(bGName) == 0 {
		qs.db.AddError(errors.New("must at least pass one bGName in BGNameIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("bg_name IN (?)", bGName))
}

// BGNameNe is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) BGNameNe(bGName string) ProjectQuerySet {
	return qs.w(qs.db.Where("bg_name != ?", bGName))
}

// BGNameNotIn is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) BGNameNotIn(bGName ...string) ProjectQuerySet {
	if len(bGName) == 0 {
		qs.db.AddError(errors.New("must at least pass one bGName in BGNameNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("bg_name NOT IN (?)", bGName))
}

// CCAppIDEq is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) CCAppIDEq(cCAppID uint) ProjectQuerySet {
	return qs.w(qs.db.Where("cc_app_id = ?", cCAppID))
}

// CCAppIDGt is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) CCAppIDGt(cCAppID uint) ProjectQuerySet {
	return qs.w(qs.db.Where("cc_app_id > ?", cCAppID))
}

// CCAppIDGte is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) CCAppIDGte(cCAppID uint) ProjectQuerySet {
	return qs.w(qs.db.Where("cc_app_id >= ?", cCAppID))
}

// CCAppIDIn is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) CCAppIDIn(cCAppID ...uint) ProjectQuerySet {
	if len(cCAppID) == 0 {
		qs.db.AddError(errors.New("must at least pass one cCAppID in CCAppIDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("cc_app_id IN (?)", cCAppID))
}

// CCAppIDLt is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) CCAppIDLt(cCAppID uint) ProjectQuerySet {
	return qs.w(qs.db.Where("cc_app_id < ?", cCAppID))
}

// CCAppIDLte is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) CCAppIDLte(cCAppID uint) ProjectQuerySet {
	return qs.w(qs.db.Where("cc_app_id <= ?", cCAppID))
}

// CCAppIDNe is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) CCAppIDNe(cCAppID uint) ProjectQuerySet {
	return qs.w(qs.db.Where("cc_app_id != ?", cCAppID))
}

// CCAppIDNotIn is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) CCAppIDNotIn(cCAppID ...uint) ProjectQuerySet {
	if len(cCAppID) == 0 {
		qs.db.AddError(errors.New("must at least pass one cCAppID in CCAppIDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("cc_app_id NOT IN (?)", cCAppID))
}

// CenterIDEq is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) CenterIDEq(centerID uint) ProjectQuerySet {
	return qs.w(qs.db.Where("center_id = ?", centerID))
}

// CenterIDGt is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) CenterIDGt(centerID uint) ProjectQuerySet {
	return qs.w(qs.db.Where("center_id > ?", centerID))
}

// CenterIDGte is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) CenterIDGte(centerID uint) ProjectQuerySet {
	return qs.w(qs.db.Where("center_id >= ?", centerID))
}

// CenterIDIn is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) CenterIDIn(centerID ...uint) ProjectQuerySet {
	if len(centerID) == 0 {
		qs.db.AddError(errors.New("must at least pass one centerID in CenterIDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("center_id IN (?)", centerID))
}

// CenterIDLt is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) CenterIDLt(centerID uint) ProjectQuerySet {
	return qs.w(qs.db.Where("center_id < ?", centerID))
}

// CenterIDLte is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) CenterIDLte(centerID uint) ProjectQuerySet {
	return qs.w(qs.db.Where("center_id <= ?", centerID))
}

// CenterIDNe is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) CenterIDNe(centerID uint) ProjectQuerySet {
	return qs.w(qs.db.Where("center_id != ?", centerID))
}

// CenterIDNotIn is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) CenterIDNotIn(centerID ...uint) ProjectQuerySet {
	if len(centerID) == 0 {
		qs.db.AddError(errors.New("must at least pass one centerID in CenterIDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("center_id NOT IN (?)", centerID))
}

// CenterNameEq is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) CenterNameEq(centerName string) ProjectQuerySet {
	return qs.w(qs.db.Where("center_name = ?", centerName))
}

// CenterNameIn is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) CenterNameIn(centerName ...string) ProjectQuerySet {
	if len(centerName) == 0 {
		qs.db.AddError(errors.New("must at least pass one centerName in CenterNameIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("center_name IN (?)", centerName))
}

// CenterNameNe is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) CenterNameNe(centerName string) ProjectQuerySet {
	return qs.w(qs.db.Where("center_name != ?", centerName))
}

// CenterNameNotIn is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) CenterNameNotIn(centerName ...string) ProjectQuerySet {
	if len(centerName) == 0 {
		qs.db.AddError(errors.New("must at least pass one centerName in CenterNameNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("center_name NOT IN (?)", centerName))
}

// Count is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) Count() (int, error) {
	var count int
	err := qs.db.Count(&count).Error
	return count, err
}

// CreatedAtEq is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) CreatedAtEq(createdAt time.Time) ProjectQuerySet {
	return qs.w(qs.db.Where("created_at = ?", createdAt))
}

// CreatedAtGt is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) CreatedAtGt(createdAt time.Time) ProjectQuerySet {
	return qs.w(qs.db.Where("created_at > ?", createdAt))
}

// CreatedAtGte is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) CreatedAtGte(createdAt time.Time) ProjectQuerySet {
	return qs.w(qs.db.Where("created_at >= ?", createdAt))
}

// CreatedAtLt is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) CreatedAtLt(createdAt time.Time) ProjectQuerySet {
	return qs.w(qs.db.Where("created_at < ?", createdAt))
}

// CreatedAtLte is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) CreatedAtLte(createdAt time.Time) ProjectQuerySet {
	return qs.w(qs.db.Where("created_at <= ?", createdAt))
}

// CreatedAtNe is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) CreatedAtNe(createdAt time.Time) ProjectQuerySet {
	return qs.w(qs.db.Where("created_at != ?", createdAt))
}

// CreatorEq is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) CreatorEq(creator string) ProjectQuerySet {
	return qs.w(qs.db.Where("creator = ?", creator))
}

// CreatorIn is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) CreatorIn(creator ...string) ProjectQuerySet {
	if len(creator) == 0 {
		qs.db.AddError(errors.New("must at least pass one creator in CreatorIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("creator IN (?)", creator))
}

// CreatorNe is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) CreatorNe(creator string) ProjectQuerySet {
	return qs.w(qs.db.Where("creator != ?", creator))
}

// CreatorNotIn is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) CreatorNotIn(creator ...string) ProjectQuerySet {
	if len(creator) == 0 {
		qs.db.AddError(errors.New("must at least pass one creator in CreatorNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("creator NOT IN (?)", creator))
}

// DataIDEq is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) DataIDEq(dataID uint) ProjectQuerySet {
	return qs.w(qs.db.Where("data_id = ?", dataID))
}

// DataIDGt is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) DataIDGt(dataID uint) ProjectQuerySet {
	return qs.w(qs.db.Where("data_id > ?", dataID))
}

// DataIDGte is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) DataIDGte(dataID uint) ProjectQuerySet {
	return qs.w(qs.db.Where("data_id >= ?", dataID))
}

// DataIDIn is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) DataIDIn(dataID ...uint) ProjectQuerySet {
	if len(dataID) == 0 {
		qs.db.AddError(errors.New("must at least pass one dataID in DataIDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("data_id IN (?)", dataID))
}

// DataIDLt is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) DataIDLt(dataID uint) ProjectQuerySet {
	return qs.w(qs.db.Where("data_id < ?", dataID))
}

// DataIDLte is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) DataIDLte(dataID uint) ProjectQuerySet {
	return qs.w(qs.db.Where("data_id <= ?", dataID))
}

// DataIDNe is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) DataIDNe(dataID uint) ProjectQuerySet {
	return qs.w(qs.db.Where("data_id != ?", dataID))
}

// DataIDNotIn is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) DataIDNotIn(dataID ...uint) ProjectQuerySet {
	if len(dataID) == 0 {
		qs.db.AddError(errors.New("must at least pass one dataID in DataIDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("data_id NOT IN (?)", dataID))
}

// Delete is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) Delete() error {
	return qs.db.Delete(Project{}).Error
}

// DeleteNum is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) DeleteNum() (int64, error) {
	db := qs.db.Delete(Project{})
	return db.RowsAffected, db.Error
}

// DeleteNumUnscoped is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) DeleteNumUnscoped() (int64, error) {
	db := qs.db.Unscoped().Delete(Project{})
	return db.RowsAffected, db.Error
}

// DeletedAtEq is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) DeletedAtEq(deletedAt time.Time) ProjectQuerySet {
	return qs.w(qs.db.Where("deleted_at = ?", deletedAt))
}

// DeletedAtGt is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) DeletedAtGt(deletedAt time.Time) ProjectQuerySet {
	return qs.w(qs.db.Where("deleted_at > ?", deletedAt))
}

// DeletedAtGte is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) DeletedAtGte(deletedAt time.Time) ProjectQuerySet {
	return qs.w(qs.db.Where("deleted_at >= ?", deletedAt))
}

// DeletedAtIsNotNull is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) DeletedAtIsNotNull() ProjectQuerySet {
	return qs.w(qs.db.Where("deleted_at IS NOT NULL"))
}

// DeletedAtIsNull is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) DeletedAtIsNull() ProjectQuerySet {
	return qs.w(qs.db.Where("deleted_at IS NULL"))
}

// DeletedAtLt is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) DeletedAtLt(deletedAt time.Time) ProjectQuerySet {
	return qs.w(qs.db.Where("deleted_at < ?", deletedAt))
}

// DeletedAtLte is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) DeletedAtLte(deletedAt time.Time) ProjectQuerySet {
	return qs.w(qs.db.Where("deleted_at <= ?", deletedAt))
}

// DeletedAtNe is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) DeletedAtNe(deletedAt time.Time) ProjectQuerySet {
	return qs.w(qs.db.Where("deleted_at != ?", deletedAt))
}

// DeployTypeEq is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) DeployTypeEq(deployType string) ProjectQuerySet {
	return qs.w(qs.db.Where("deploy_type = ?", deployType))
}

// DeployTypeIn is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) DeployTypeIn(deployType ...string) ProjectQuerySet {
	if len(deployType) == 0 {
		qs.db.AddError(errors.New("must at least pass one deployType in DeployTypeIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("deploy_type IN (?)", deployType))
}

// DeployTypeNe is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) DeployTypeNe(deployType string) ProjectQuerySet {
	return qs.w(qs.db.Where("deploy_type != ?", deployType))
}

// DeployTypeNotIn is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) DeployTypeNotIn(deployType ...string) ProjectQuerySet {
	if len(deployType) == 0 {
		qs.db.AddError(errors.New("must at least pass one deployType in DeployTypeNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("deploy_type NOT IN (?)", deployType))
}

// DeptIDEq is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) DeptIDEq(deptID uint) ProjectQuerySet {
	return qs.w(qs.db.Where("dept_id = ?", deptID))
}

// DeptIDGt is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) DeptIDGt(deptID uint) ProjectQuerySet {
	return qs.w(qs.db.Where("dept_id > ?", deptID))
}

// DeptIDGte is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) DeptIDGte(deptID uint) ProjectQuerySet {
	return qs.w(qs.db.Where("dept_id >= ?", deptID))
}

// DeptIDIn is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) DeptIDIn(deptID ...uint) ProjectQuerySet {
	if len(deptID) == 0 {
		qs.db.AddError(errors.New("must at least pass one deptID in DeptIDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("dept_id IN (?)", deptID))
}

// DeptIDLt is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) DeptIDLt(deptID uint) ProjectQuerySet {
	return qs.w(qs.db.Where("dept_id < ?", deptID))
}

// DeptIDLte is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) DeptIDLte(deptID uint) ProjectQuerySet {
	return qs.w(qs.db.Where("dept_id <= ?", deptID))
}

// DeptIDNe is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) DeptIDNe(deptID uint) ProjectQuerySet {
	return qs.w(qs.db.Where("dept_id != ?", deptID))
}

// DeptIDNotIn is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) DeptIDNotIn(deptID ...uint) ProjectQuerySet {
	if len(deptID) == 0 {
		qs.db.AddError(errors.New("must at least pass one deptID in DeptIDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("dept_id NOT IN (?)", deptID))
}

// DeptNameEq is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) DeptNameEq(deptName string) ProjectQuerySet {
	return qs.w(qs.db.Where("dept_name = ?", deptName))
}

// DeptNameIn is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) DeptNameIn(deptName ...string) ProjectQuerySet {
	if len(deptName) == 0 {
		qs.db.AddError(errors.New("must at least pass one deptName in DeptNameIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("dept_name IN (?)", deptName))
}

// DeptNameNe is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) DeptNameNe(deptName string) ProjectQuerySet {
	return qs.w(qs.db.Where("dept_name != ?", deptName))
}

// DeptNameNotIn is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) DeptNameNotIn(deptName ...string) ProjectQuerySet {
	if len(deptName) == 0 {
		qs.db.AddError(errors.New("must at least pass one deptName in DeptNameNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("dept_name NOT IN (?)", deptName))
}

// DescriptionEq is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) DescriptionEq(description string) ProjectQuerySet {
	return qs.w(qs.db.Where("description = ?", description))
}

// DescriptionIn is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) DescriptionIn(description ...string) ProjectQuerySet {
	if len(description) == 0 {
		qs.db.AddError(errors.New("must at least pass one description in DescriptionIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("description IN (?)", description))
}

// DescriptionNe is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) DescriptionNe(description string) ProjectQuerySet {
	return qs.w(qs.db.Where("description != ?", description))
}

// DescriptionNotIn is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) DescriptionNotIn(description ...string) ProjectQuerySet {
	if len(description) == 0 {
		qs.db.AddError(errors.New("must at least pass one description in DescriptionNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("description NOT IN (?)", description))
}

// EnglishNameEq is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) EnglishNameEq(englishName string) ProjectQuerySet {
	return qs.w(qs.db.Where("english_name = ?", englishName))
}

// EnglishNameIn is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) EnglishNameIn(englishName ...string) ProjectQuerySet {
	if len(englishName) == 0 {
		qs.db.AddError(errors.New("must at least pass one englishName in EnglishNameIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("english_name IN (?)", englishName))
}

// EnglishNameNe is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) EnglishNameNe(englishName string) ProjectQuerySet {
	return qs.w(qs.db.Where("english_name != ?", englishName))
}

// EnglishNameNotIn is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) EnglishNameNotIn(englishName ...string) ProjectQuerySet {
	if len(englishName) == 0 {
		qs.db.AddError(errors.New("must at least pass one englishName in EnglishNameNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("english_name NOT IN (?)", englishName))
}

// ExtraEq is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) ExtraEq(extra string) ProjectQuerySet {
	return qs.w(qs.db.Where("extra = ?", extra))
}

// ExtraIn is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) ExtraIn(extra ...string) ProjectQuerySet {
	if len(extra) == 0 {
		qs.db.AddError(errors.New("must at least pass one extra in ExtraIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("extra IN (?)", extra))
}

// ExtraNe is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) ExtraNe(extra string) ProjectQuerySet {
	return qs.w(qs.db.Where("extra != ?", extra))
}

// ExtraNotIn is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) ExtraNotIn(extra ...string) ProjectQuerySet {
	if len(extra) == 0 {
		qs.db.AddError(errors.New("must at least pass one extra in ExtraNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("extra NOT IN (?)", extra))
}

// GetDB is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) GetDB() *gorm.DB {
	return qs.db
}

// GetUpdater is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) GetUpdater() ProjectUpdater {
	return NewProjectUpdater(qs.db)
}

// IDEq is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) IDEq(ID uint) ProjectQuerySet {
	return qs.w(qs.db.Where("id = ?", ID))
}

// IDGt is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) IDGt(ID uint) ProjectQuerySet {
	return qs.w(qs.db.Where("id > ?", ID))
}

// IDGte is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) IDGte(ID uint) ProjectQuerySet {
	return qs.w(qs.db.Where("id >= ?", ID))
}

// IDIn is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) IDIn(ID ...uint) ProjectQuerySet {
	if len(ID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ID in IDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("id IN (?)", ID))
}

// IDLt is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) IDLt(ID uint) ProjectQuerySet {
	return qs.w(qs.db.Where("id < ?", ID))
}

// IDLte is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) IDLte(ID uint) ProjectQuerySet {
	return qs.w(qs.db.Where("id <= ?", ID))
}

// IDNe is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) IDNe(ID uint) ProjectQuerySet {
	return qs.w(qs.db.Where("id != ?", ID))
}

// IDNotIn is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) IDNotIn(ID ...uint) ProjectQuerySet {
	if len(ID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ID in IDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("id NOT IN (?)", ID))
}

// IsOfflinedEq is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) IsOfflinedEq(isOfflined bool) ProjectQuerySet {
	return qs.w(qs.db.Where("is_offlined = ?", isOfflined))
}

// IsOfflinedIn is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) IsOfflinedIn(isOfflined ...bool) ProjectQuerySet {
	if len(isOfflined) == 0 {
		qs.db.AddError(errors.New("must at least pass one isOfflined in IsOfflinedIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("is_offlined IN (?)", isOfflined))
}

// IsOfflinedNe is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) IsOfflinedNe(isOfflined bool) ProjectQuerySet {
	return qs.w(qs.db.Where("is_offlined != ?", isOfflined))
}

// IsOfflinedNotIn is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) IsOfflinedNotIn(isOfflined ...bool) ProjectQuerySet {
	if len(isOfflined) == 0 {
		qs.db.AddError(errors.New("must at least pass one isOfflined in IsOfflinedNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("is_offlined NOT IN (?)", isOfflined))
}

// IsSecrecyEq is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) IsSecrecyEq(isSecrecy bool) ProjectQuerySet {
	return qs.w(qs.db.Where("is_secrecy = ?", isSecrecy))
}

// IsSecrecyIn is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) IsSecrecyIn(isSecrecy ...bool) ProjectQuerySet {
	if len(isSecrecy) == 0 {
		qs.db.AddError(errors.New("must at least pass one isSecrecy in IsSecrecyIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("is_secrecy IN (?)", isSecrecy))
}

// IsSecrecyNe is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) IsSecrecyNe(isSecrecy bool) ProjectQuerySet {
	return qs.w(qs.db.Where("is_secrecy != ?", isSecrecy))
}

// IsSecrecyNotIn is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) IsSecrecyNotIn(isSecrecy ...bool) ProjectQuerySet {
	if len(isSecrecy) == 0 {
		qs.db.AddError(errors.New("must at least pass one isSecrecy in IsSecrecyNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("is_secrecy NOT IN (?)", isSecrecy))
}

// KindEq is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) KindEq(kind uint) ProjectQuerySet {
	return qs.w(qs.db.Where("kind = ?", kind))
}

// KindGt is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) KindGt(kind uint) ProjectQuerySet {
	return qs.w(qs.db.Where("kind > ?", kind))
}

// KindGte is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) KindGte(kind uint) ProjectQuerySet {
	return qs.w(qs.db.Where("kind >= ?", kind))
}

// KindIn is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) KindIn(kind ...uint) ProjectQuerySet {
	if len(kind) == 0 {
		qs.db.AddError(errors.New("must at least pass one kind in KindIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("kind IN (?)", kind))
}

// KindLt is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) KindLt(kind uint) ProjectQuerySet {
	return qs.w(qs.db.Where("kind < ?", kind))
}

// KindLte is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) KindLte(kind uint) ProjectQuerySet {
	return qs.w(qs.db.Where("kind <= ?", kind))
}

// KindNe is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) KindNe(kind uint) ProjectQuerySet {
	return qs.w(qs.db.Where("kind != ?", kind))
}

// KindNotIn is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) KindNotIn(kind ...uint) ProjectQuerySet {
	if len(kind) == 0 {
		qs.db.AddError(errors.New("must at least pass one kind in KindNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("kind NOT IN (?)", kind))
}

// Limit is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) Limit(limit int) ProjectQuerySet {
	return qs.w(qs.db.Limit(limit))
}

// LogoAddrEq is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) LogoAddrEq(logoAddr string) ProjectQuerySet {
	return qs.w(qs.db.Where("logo_addr = ?", logoAddr))
}

// LogoAddrIn is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) LogoAddrIn(logoAddr ...string) ProjectQuerySet {
	if len(logoAddr) == 0 {
		qs.db.AddError(errors.New("must at least pass one logoAddr in LogoAddrIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("logo_addr IN (?)", logoAddr))
}

// LogoAddrNe is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) LogoAddrNe(logoAddr string) ProjectQuerySet {
	return qs.w(qs.db.Where("logo_addr != ?", logoAddr))
}

// LogoAddrNotIn is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) LogoAddrNotIn(logoAddr ...string) ProjectQuerySet {
	if len(logoAddr) == 0 {
		qs.db.AddError(errors.New("must at least pass one logoAddr in LogoAddrNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("logo_addr NOT IN (?)", logoAddr))
}

// NameEq is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) NameEq(name string) ProjectQuerySet {
	return qs.w(qs.db.Where("name = ?", name))
}

// NameIn is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) NameIn(name ...string) ProjectQuerySet {
	if len(name) == 0 {
		qs.db.AddError(errors.New("must at least pass one name in NameIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("name IN (?)", name))
}

// NameNe is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) NameNe(name string) ProjectQuerySet {
	return qs.w(qs.db.Where("name != ?", name))
}

// NameNotIn is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) NameNotIn(name ...string) ProjectQuerySet {
	if len(name) == 0 {
		qs.db.AddError(errors.New("must at least pass one name in NameNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("name NOT IN (?)", name))
}

// Offset is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) Offset(offset int) ProjectQuerySet {
	return qs.w(qs.db.Offset(offset))
}

// One is used to retrieve one result. It returns gorm.ErrRecordNotFound
// if nothing was fetched
func (qs ProjectQuerySet) One(ret *Project) error {
	return qs.db.First(ret).Error
}

// OrderAscByApprovalStatus is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) OrderAscByApprovalStatus() ProjectQuerySet {
	return qs.w(qs.db.Order("approval_status ASC"))
}

// OrderAscByApprovalTime is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) OrderAscByApprovalTime() ProjectQuerySet {
	return qs.w(qs.db.Order("approval_time ASC"))
}

// OrderAscByBGID is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) OrderAscByBGID() ProjectQuerySet {
	return qs.w(qs.db.Order("bg_id ASC"))
}

// OrderAscByCCAppID is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) OrderAscByCCAppID() ProjectQuerySet {
	return qs.w(qs.db.Order("cc_app_id ASC"))
}

// OrderAscByCenterID is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) OrderAscByCenterID() ProjectQuerySet {
	return qs.w(qs.db.Order("center_id ASC"))
}

// OrderAscByCreatedAt is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) OrderAscByCreatedAt() ProjectQuerySet {
	return qs.w(qs.db.Order("created_at ASC"))
}

// OrderAscByDataID is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) OrderAscByDataID() ProjectQuerySet {
	return qs.w(qs.db.Order("data_id ASC"))
}

// OrderAscByDeletedAt is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) OrderAscByDeletedAt() ProjectQuerySet {
	return qs.w(qs.db.Order("deleted_at ASC"))
}

// OrderAscByDeptID is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) OrderAscByDeptID() ProjectQuerySet {
	return qs.w(qs.db.Order("dept_id ASC"))
}

// OrderAscByID is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) OrderAscByID() ProjectQuerySet {
	return qs.w(qs.db.Order("id ASC"))
}

// OrderAscByKind is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) OrderAscByKind() ProjectQuerySet {
	return qs.w(qs.db.Order("kind ASC"))
}

// OrderAscByProjectType is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) OrderAscByProjectType() ProjectQuerySet {
	return qs.w(qs.db.Order("project_type ASC"))
}

// OrderAscByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) OrderAscByUpdatedAt() ProjectQuerySet {
	return qs.w(qs.db.Order("updated_at ASC"))
}

// OrderDescByApprovalStatus is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) OrderDescByApprovalStatus() ProjectQuerySet {
	return qs.w(qs.db.Order("approval_status DESC"))
}

// OrderDescByApprovalTime is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) OrderDescByApprovalTime() ProjectQuerySet {
	return qs.w(qs.db.Order("approval_time DESC"))
}

// OrderDescByBGID is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) OrderDescByBGID() ProjectQuerySet {
	return qs.w(qs.db.Order("bg_id DESC"))
}

// OrderDescByCCAppID is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) OrderDescByCCAppID() ProjectQuerySet {
	return qs.w(qs.db.Order("cc_app_id DESC"))
}

// OrderDescByCenterID is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) OrderDescByCenterID() ProjectQuerySet {
	return qs.w(qs.db.Order("center_id DESC"))
}

// OrderDescByCreatedAt is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) OrderDescByCreatedAt() ProjectQuerySet {
	return qs.w(qs.db.Order("created_at DESC"))
}

// OrderDescByDataID is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) OrderDescByDataID() ProjectQuerySet {
	return qs.w(qs.db.Order("data_id DESC"))
}

// OrderDescByDeletedAt is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) OrderDescByDeletedAt() ProjectQuerySet {
	return qs.w(qs.db.Order("deleted_at DESC"))
}

// OrderDescByDeptID is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) OrderDescByDeptID() ProjectQuerySet {
	return qs.w(qs.db.Order("dept_id DESC"))
}

// OrderDescByID is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) OrderDescByID() ProjectQuerySet {
	return qs.w(qs.db.Order("id DESC"))
}

// OrderDescByKind is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) OrderDescByKind() ProjectQuerySet {
	return qs.w(qs.db.Order("kind DESC"))
}

// OrderDescByProjectType is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) OrderDescByProjectType() ProjectQuerySet {
	return qs.w(qs.db.Order("project_type DESC"))
}

// OrderDescByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) OrderDescByUpdatedAt() ProjectQuerySet {
	return qs.w(qs.db.Order("updated_at DESC"))
}

// ProjectIDEq is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) ProjectIDEq(projectID string) ProjectQuerySet {
	return qs.w(qs.db.Where("project_id = ?", projectID))
}

// ProjectIDIn is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) ProjectIDIn(projectID ...string) ProjectQuerySet {
	if len(projectID) == 0 {
		qs.db.AddError(errors.New("must at least pass one projectID in ProjectIDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("project_id IN (?)", projectID))
}

// ProjectIDNe is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) ProjectIDNe(projectID string) ProjectQuerySet {
	return qs.w(qs.db.Where("project_id != ?", projectID))
}

// ProjectIDNotIn is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) ProjectIDNotIn(projectID ...string) ProjectQuerySet {
	if len(projectID) == 0 {
		qs.db.AddError(errors.New("must at least pass one projectID in ProjectIDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("project_id NOT IN (?)", projectID))
}

// ProjectTypeEq is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) ProjectTypeEq(projectType uint) ProjectQuerySet {
	return qs.w(qs.db.Where("project_type = ?", projectType))
}

// ProjectTypeGt is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) ProjectTypeGt(projectType uint) ProjectQuerySet {
	return qs.w(qs.db.Where("project_type > ?", projectType))
}

// ProjectTypeGte is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) ProjectTypeGte(projectType uint) ProjectQuerySet {
	return qs.w(qs.db.Where("project_type >= ?", projectType))
}

// ProjectTypeIn is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) ProjectTypeIn(projectType ...uint) ProjectQuerySet {
	if len(projectType) == 0 {
		qs.db.AddError(errors.New("must at least pass one projectType in ProjectTypeIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("project_type IN (?)", projectType))
}

// ProjectTypeLt is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) ProjectTypeLt(projectType uint) ProjectQuerySet {
	return qs.w(qs.db.Where("project_type < ?", projectType))
}

// ProjectTypeLte is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) ProjectTypeLte(projectType uint) ProjectQuerySet {
	return qs.w(qs.db.Where("project_type <= ?", projectType))
}

// ProjectTypeNe is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) ProjectTypeNe(projectType uint) ProjectQuerySet {
	return qs.w(qs.db.Where("project_type != ?", projectType))
}

// ProjectTypeNotIn is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) ProjectTypeNotIn(projectType ...uint) ProjectQuerySet {
	if len(projectType) == 0 {
		qs.db.AddError(errors.New("must at least pass one projectType in ProjectTypeNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("project_type NOT IN (?)", projectType))
}

// RemarkEq is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) RemarkEq(remark string) ProjectQuerySet {
	return qs.w(qs.db.Where("remark = ?", remark))
}

// RemarkIn is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) RemarkIn(remark ...string) ProjectQuerySet {
	if len(remark) == 0 {
		qs.db.AddError(errors.New("must at least pass one remark in RemarkIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("remark IN (?)", remark))
}

// RemarkNe is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) RemarkNe(remark string) ProjectQuerySet {
	return qs.w(qs.db.Where("remark != ?", remark))
}

// RemarkNotIn is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) RemarkNotIn(remark ...string) ProjectQuerySet {
	if len(remark) == 0 {
		qs.db.AddError(errors.New("must at least pass one remark in RemarkNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("remark NOT IN (?)", remark))
}

// UpdatedAtEq is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) UpdatedAtEq(updatedAt time.Time) ProjectQuerySet {
	return qs.w(qs.db.Where("updated_at = ?", updatedAt))
}

// UpdatedAtGt is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) UpdatedAtGt(updatedAt time.Time) ProjectQuerySet {
	return qs.w(qs.db.Where("updated_at > ?", updatedAt))
}

// UpdatedAtGte is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) UpdatedAtGte(updatedAt time.Time) ProjectQuerySet {
	return qs.w(qs.db.Where("updated_at >= ?", updatedAt))
}

// UpdatedAtLt is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) UpdatedAtLt(updatedAt time.Time) ProjectQuerySet {
	return qs.w(qs.db.Where("updated_at < ?", updatedAt))
}

// UpdatedAtLte is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) UpdatedAtLte(updatedAt time.Time) ProjectQuerySet {
	return qs.w(qs.db.Where("updated_at <= ?", updatedAt))
}

// UpdatedAtNe is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) UpdatedAtNe(updatedAt time.Time) ProjectQuerySet {
	return qs.w(qs.db.Where("updated_at != ?", updatedAt))
}

// UpdatorEq is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) UpdatorEq(updator string) ProjectQuerySet {
	return qs.w(qs.db.Where("updator = ?", updator))
}

// UpdatorIn is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) UpdatorIn(updator ...string) ProjectQuerySet {
	if len(updator) == 0 {
		qs.db.AddError(errors.New("must at least pass one updator in UpdatorIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("updator IN (?)", updator))
}

// UpdatorNe is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) UpdatorNe(updator string) ProjectQuerySet {
	return qs.w(qs.db.Where("updator != ?", updator))
}

// UpdatorNotIn is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) UpdatorNotIn(updator ...string) ProjectQuerySet {
	if len(updator) == 0 {
		qs.db.AddError(errors.New("must at least pass one updator in UpdatorNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("updator NOT IN (?)", updator))
}

// UseBKEq is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) UseBKEq(useBK bool) ProjectQuerySet {
	return qs.w(qs.db.Where("use_bk = ?", useBK))
}

// UseBKIn is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) UseBKIn(useBK ...bool) ProjectQuerySet {
	if len(useBK) == 0 {
		qs.db.AddError(errors.New("must at least pass one useBK in UseBKIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("use_bk IN (?)", useBK))
}

// UseBKNe is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) UseBKNe(useBK bool) ProjectQuerySet {
	return qs.w(qs.db.Where("use_bk != ?", useBK))
}

// UseBKNotIn is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) UseBKNotIn(useBK ...bool) ProjectQuerySet {
	if len(useBK) == 0 {
		qs.db.AddError(errors.New("must at least pass one useBK in UseBKNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("use_bk NOT IN (?)", useBK))
}

// SetApprovalStatus is an autogenerated method
// nolint: dupl
func (u ProjectUpdater) SetApprovalStatus(approvalStatus uint) ProjectUpdater {
	u.fields[string(ProjectDBSchema.ApprovalStatus)] = approvalStatus
	return u
}

// SetApprovalTime is an autogenerated method
// nolint: dupl
func (u ProjectUpdater) SetApprovalTime(approvalTime time.Time) ProjectUpdater {
	u.fields[string(ProjectDBSchema.ApprovalTime)] = approvalTime
	return u
}

// SetApprover is an autogenerated method
// nolint: dupl
func (u ProjectUpdater) SetApprover(approver string) ProjectUpdater {
	u.fields[string(ProjectDBSchema.Approver)] = approver
	return u
}

// SetBGID is an autogenerated method
// nolint: dupl
func (u ProjectUpdater) SetBGID(bGID uint) ProjectUpdater {
	u.fields[string(ProjectDBSchema.BGID)] = bGID
	return u
}

// SetBGName is an autogenerated method
// nolint: dupl
func (u ProjectUpdater) SetBGName(bGName string) ProjectUpdater {
	u.fields[string(ProjectDBSchema.BGName)] = bGName
	return u
}

// SetCCAppID is an autogenerated method
// nolint: dupl
func (u ProjectUpdater) SetCCAppID(cCAppID uint) ProjectUpdater {
	u.fields[string(ProjectDBSchema.CCAppID)] = cCAppID
	return u
}

// SetCenterID is an autogenerated method
// nolint: dupl
func (u ProjectUpdater) SetCenterID(centerID uint) ProjectUpdater {
	u.fields[string(ProjectDBSchema.CenterID)] = centerID
	return u
}

// SetCenterName is an autogenerated method
// nolint: dupl
func (u ProjectUpdater) SetCenterName(centerName string) ProjectUpdater {
	u.fields[string(ProjectDBSchema.CenterName)] = centerName
	return u
}

// SetCreatedAt is an autogenerated method
// nolint: dupl
func (u ProjectUpdater) SetCreatedAt(createdAt time.Time) ProjectUpdater {
	u.fields[string(ProjectDBSchema.CreatedAt)] = createdAt
	return u
}

// SetCreator is an autogenerated method
// nolint: dupl
func (u ProjectUpdater) SetCreator(creator string) ProjectUpdater {
	u.fields[string(ProjectDBSchema.Creator)] = creator
	return u
}

// SetDataID is an autogenerated method
// nolint: dupl
func (u ProjectUpdater) SetDataID(dataID uint) ProjectUpdater {
	u.fields[string(ProjectDBSchema.DataID)] = dataID
	return u
}

// SetDeletedAt is an autogenerated method
// nolint: dupl
func (u ProjectUpdater) SetDeletedAt(deletedAt *time.Time) ProjectUpdater {
	u.fields[string(ProjectDBSchema.DeletedAt)] = deletedAt
	return u
}

// SetDeployType is an autogenerated method
// nolint: dupl
func (u ProjectUpdater) SetDeployType(deployType string) ProjectUpdater {
	u.fields[string(ProjectDBSchema.DeployType)] = deployType
	return u
}

// SetDeptID is an autogenerated method
// nolint: dupl
func (u ProjectUpdater) SetDeptID(deptID uint) ProjectUpdater {
	u.fields[string(ProjectDBSchema.DeptID)] = deptID
	return u
}

// SetDeptName is an autogenerated method
// nolint: dupl
func (u ProjectUpdater) SetDeptName(deptName string) ProjectUpdater {
	u.fields[string(ProjectDBSchema.DeptName)] = deptName
	return u
}

// SetDescription is an autogenerated method
// nolint: dupl
func (u ProjectUpdater) SetDescription(description string) ProjectUpdater {
	u.fields[string(ProjectDBSchema.Description)] = description
	return u
}

// SetEnglishName is an autogenerated method
// nolint: dupl
func (u ProjectUpdater) SetEnglishName(englishName string) ProjectUpdater {
	u.fields[string(ProjectDBSchema.EnglishName)] = englishName
	return u
}

// SetExtra is an autogenerated method
// nolint: dupl
func (u ProjectUpdater) SetExtra(extra string) ProjectUpdater {
	u.fields[string(ProjectDBSchema.Extra)] = extra
	return u
}

// SetID is an autogenerated method
// nolint: dupl
func (u ProjectUpdater) SetID(ID uint) ProjectUpdater {
	u.fields[string(ProjectDBSchema.ID)] = ID
	return u
}

// SetIsOfflined is an autogenerated method
// nolint: dupl
func (u ProjectUpdater) SetIsOfflined(isOfflined bool) ProjectUpdater {
	u.fields[string(ProjectDBSchema.IsOfflined)] = isOfflined
	return u
}

// SetIsSecrecy is an autogenerated method
// nolint: dupl
func (u ProjectUpdater) SetIsSecrecy(isSecrecy bool) ProjectUpdater {
	u.fields[string(ProjectDBSchema.IsSecrecy)] = isSecrecy
	return u
}

// SetKind is an autogenerated method
// nolint: dupl
func (u ProjectUpdater) SetKind(kind uint) ProjectUpdater {
	u.fields[string(ProjectDBSchema.Kind)] = kind
	return u
}

// SetLogoAddr is an autogenerated method
// nolint: dupl
func (u ProjectUpdater) SetLogoAddr(logoAddr string) ProjectUpdater {
	u.fields[string(ProjectDBSchema.LogoAddr)] = logoAddr
	return u
}

// SetName is an autogenerated method
// nolint: dupl
func (u ProjectUpdater) SetName(name string) ProjectUpdater {
	u.fields[string(ProjectDBSchema.Name)] = name
	return u
}

// SetProjectID is an autogenerated method
// nolint: dupl
func (u ProjectUpdater) SetProjectID(projectID string) ProjectUpdater {
	u.fields[string(ProjectDBSchema.ProjectID)] = projectID
	return u
}

// SetProjectType is an autogenerated method
// nolint: dupl
func (u ProjectUpdater) SetProjectType(projectType uint) ProjectUpdater {
	u.fields[string(ProjectDBSchema.ProjectType)] = projectType
	return u
}

// SetRemark is an autogenerated method
// nolint: dupl
func (u ProjectUpdater) SetRemark(remark string) ProjectUpdater {
	u.fields[string(ProjectDBSchema.Remark)] = remark
	return u
}

// SetUpdatedAt is an autogenerated method
// nolint: dupl
func (u ProjectUpdater) SetUpdatedAt(updatedAt time.Time) ProjectUpdater {
	u.fields[string(ProjectDBSchema.UpdatedAt)] = updatedAt
	return u
}

// SetUpdator is an autogenerated method
// nolint: dupl
func (u ProjectUpdater) SetUpdator(updator string) ProjectUpdater {
	u.fields[string(ProjectDBSchema.Updator)] = updator
	return u
}

// SetUseBK is an autogenerated method
// nolint: dupl
func (u ProjectUpdater) SetUseBK(useBK bool) ProjectUpdater {
	u.fields[string(ProjectDBSchema.UseBK)] = useBK
	return u
}

// Update is an autogenerated method
// nolint: dupl
func (u ProjectUpdater) Update() error {
	return u.db.Updates(u.fields).Error
}

// UpdateNum is an autogenerated method
// nolint: dupl
func (u ProjectUpdater) UpdateNum() (int64, error) {
	db := u.db.Updates(u.fields)
	return db.RowsAffected, db.Error
}

// ===== END of query set ProjectQuerySet

// ===== BEGIN of Project modifiers

// ProjectDBSchemaField describes database schema field. It requires for method 'Update'
type ProjectDBSchemaField string

// String method returns string representation of field.
// nolint: dupl
func (f ProjectDBSchemaField) String() string {
	return string(f)
}

// ProjectDBSchema stores db field names of Project
var ProjectDBSchema = struct {
	ID             ProjectDBSchemaField
	CreatedAt      ProjectDBSchemaField
	UpdatedAt      ProjectDBSchemaField
	DeletedAt      ProjectDBSchemaField
	Extra          ProjectDBSchemaField
	Name           ProjectDBSchemaField
	EnglishName    ProjectDBSchemaField
	Creator        ProjectDBSchemaField
	Updator        ProjectDBSchemaField
	Description    ProjectDBSchemaField
	ProjectType    ProjectDBSchemaField
	IsOfflined     ProjectDBSchemaField
	ProjectID      ProjectDBSchemaField
	UseBK          ProjectDBSchemaField
	CCAppID        ProjectDBSchemaField
	Kind           ProjectDBSchemaField
	DeployType     ProjectDBSchemaField
	BGID           ProjectDBSchemaField
	BGName         ProjectDBSchemaField
	DeptID         ProjectDBSchemaField
	DeptName       ProjectDBSchemaField
	CenterID       ProjectDBSchemaField
	CenterName     ProjectDBSchemaField
	DataID         ProjectDBSchemaField
	IsSecrecy      ProjectDBSchemaField
	ApprovalStatus ProjectDBSchemaField
	LogoAddr       ProjectDBSchemaField
	Approver       ProjectDBSchemaField
	Remark         ProjectDBSchemaField
	ApprovalTime   ProjectDBSchemaField
}{

	ID:             ProjectDBSchemaField("id"),
	CreatedAt:      ProjectDBSchemaField("created_at"),
	UpdatedAt:      ProjectDBSchemaField("updated_at"),
	DeletedAt:      ProjectDBSchemaField("deleted_at"),
	Extra:          ProjectDBSchemaField("extra"),
	Name:           ProjectDBSchemaField("name"),
	EnglishName:    ProjectDBSchemaField("english_name"),
	Creator:        ProjectDBSchemaField("creator"),
	Updator:        ProjectDBSchemaField("updator"),
	Description:    ProjectDBSchemaField("description"),
	ProjectType:    ProjectDBSchemaField("project_type"),
	IsOfflined:     ProjectDBSchemaField("is_offlined"),
	ProjectID:      ProjectDBSchemaField("project_id"),
	UseBK:          ProjectDBSchemaField("use_bk"),
	CCAppID:        ProjectDBSchemaField("cc_app_id"),
	Kind:           ProjectDBSchemaField("kind"),
	DeployType:     ProjectDBSchemaField("deploy_type"),
	BGID:           ProjectDBSchemaField("bg_id"),
	BGName:         ProjectDBSchemaField("bg_name"),
	DeptID:         ProjectDBSchemaField("dept_id"),
	DeptName:       ProjectDBSchemaField("dept_name"),
	CenterID:       ProjectDBSchemaField("center_id"),
	CenterName:     ProjectDBSchemaField("center_name"),
	DataID:         ProjectDBSchemaField("data_id"),
	IsSecrecy:      ProjectDBSchemaField("is_secrecy"),
	ApprovalStatus: ProjectDBSchemaField("approval_status"),
	LogoAddr:       ProjectDBSchemaField("logo_addr"),
	Approver:       ProjectDBSchemaField("approver"),
	Remark:         ProjectDBSchemaField("remark"),
	ApprovalTime:   ProjectDBSchemaField("approval_time"),
}

// Update updates Project fields by primary key
// nolint: dupl
func (o *Project) Update(db *gorm.DB, fields ...ProjectDBSchemaField) error {
	dbNameToFieldName := map[string]interface{}{
		"id":              o.ID,
		"created_at":      o.CreatedAt,
		"updated_at":      o.UpdatedAt,
		"deleted_at":      o.DeletedAt,
		"extra":           o.Extra,
		"name":            o.Name,
		"english_name":    o.EnglishName,
		"creator":         o.Creator,
		"updator":         o.Updator,
		"description":     o.Description,
		"project_type":    o.ProjectType,
		"is_offlined":     o.IsOfflined,
		"project_id":      o.ProjectID,
		"use_bk":          o.UseBK,
		"cc_app_id":       o.CCAppID,
		"kind":            o.Kind,
		"deploy_type":     o.DeployType,
		"bg_id":           o.BGID,
		"bg_name":         o.BGName,
		"dept_id":         o.DeptID,
		"dept_name":       o.DeptName,
		"center_id":       o.CenterID,
		"center_name":     o.CenterName,
		"data_id":         o.DataID,
		"is_secrecy":      o.IsSecrecy,
		"approval_status": o.ApprovalStatus,
		"logo_addr":       o.LogoAddr,
		"approver":        o.Approver,
		"remark":          o.Remark,
		"approval_time":   o.ApprovalTime,
	}
	u := map[string]interface{}{}
	for _, f := range fields {
		fs := f.String()
		u[fs] = dbNameToFieldName[fs]
	}
	if err := db.Model(o).Updates(u).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return err
		}

		return fmt.Errorf("can't update Project %v fields %v: %s",
			o, fields, err)
	}

	return nil
}

// ProjectUpdater is an Project updates manager
type ProjectUpdater struct {
	fields map[string]interface{}
	db     *gorm.DB
}

// NewProjectUpdater creates new Project updater
// nolint: dupl
func NewProjectUpdater(db *gorm.DB) ProjectUpdater {
	return ProjectUpdater{
		fields: map[string]interface{}{},
		db:     db.Model(&Project{}),
	}
}

// ===== END of Project modifiers

// ===== END of all query sets
