// Code generated by go-queryset. DO NOT EDIT.
package models

import (
	"errors"
	"fmt"
	"time"

	"github.com/jinzhu/gorm"
)

// ===== BEGIN of all query sets

// ===== BEGIN of query set BcsServiceConfQuerySet

// BcsServiceConfQuerySet is an queryset type for BcsServiceConf
type BcsServiceConfQuerySet struct {
	db *gorm.DB
}

// NewBcsServiceConfQuerySet constructs new BcsServiceConfQuerySet
func NewBcsServiceConfQuerySet(db *gorm.DB) BcsServiceConfQuerySet {
	return BcsServiceConfQuerySet{
		db: db.Model(&BcsServiceConf{}),
	}
}

func (qs BcsServiceConfQuerySet) w(db *gorm.DB) BcsServiceConfQuerySet {
	return NewBcsServiceConfQuerySet(db)
}

// Create is an autogenerated method
// nolint: dupl
func (o *BcsServiceConf) Create(db *gorm.DB) error {
	return db.Create(o).Error
}

// Delete is an autogenerated method
// nolint: dupl
func (o *BcsServiceConf) Delete(db *gorm.DB) error {
	return db.Delete(o).Error
}

// All is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfQuerySet) All(ret *[]BcsServiceConf) error {
	return qs.db.Find(ret).Error
}

// ConfigurationEq is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfQuerySet) ConfigurationEq(configuration string) BcsServiceConfQuerySet {
	return qs.w(qs.db.Where("configuration = ?", configuration))
}

// ConfigurationIn is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfQuerySet) ConfigurationIn(configuration ...string) BcsServiceConfQuerySet {
	if len(configuration) == 0 {
		qs.db.AddError(errors.New("must at least pass one configuration in ConfigurationIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("configuration IN (?)", configuration))
}

// ConfigurationNe is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfQuerySet) ConfigurationNe(configuration string) BcsServiceConfQuerySet {
	return qs.w(qs.db.Where("configuration != ?", configuration))
}

// ConfigurationNotIn is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfQuerySet) ConfigurationNotIn(configuration ...string) BcsServiceConfQuerySet {
	if len(configuration) == 0 {
		qs.db.AddError(errors.New("must at least pass one configuration in ConfigurationNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("configuration NOT IN (?)", configuration))
}

// Count is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfQuerySet) Count() (int, error) {
	var count int
	err := qs.db.Count(&count).Error
	return count, err
}

// CreatedAtEq is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfQuerySet) CreatedAtEq(createdAt time.Time) BcsServiceConfQuerySet {
	return qs.w(qs.db.Where("created_at = ?", createdAt))
}

// CreatedAtGt is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfQuerySet) CreatedAtGt(createdAt time.Time) BcsServiceConfQuerySet {
	return qs.w(qs.db.Where("created_at > ?", createdAt))
}

// CreatedAtGte is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfQuerySet) CreatedAtGte(createdAt time.Time) BcsServiceConfQuerySet {
	return qs.w(qs.db.Where("created_at >= ?", createdAt))
}

// CreatedAtLt is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfQuerySet) CreatedAtLt(createdAt time.Time) BcsServiceConfQuerySet {
	return qs.w(qs.db.Where("created_at < ?", createdAt))
}

// CreatedAtLte is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfQuerySet) CreatedAtLte(createdAt time.Time) BcsServiceConfQuerySet {
	return qs.w(qs.db.Where("created_at <= ?", createdAt))
}

// CreatedAtNe is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfQuerySet) CreatedAtNe(createdAt time.Time) BcsServiceConfQuerySet {
	return qs.w(qs.db.Where("created_at != ?", createdAt))
}

// CreatorEq is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfQuerySet) CreatorEq(creator string) BcsServiceConfQuerySet {
	return qs.w(qs.db.Where("creator = ?", creator))
}

// CreatorIn is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfQuerySet) CreatorIn(creator ...string) BcsServiceConfQuerySet {
	if len(creator) == 0 {
		qs.db.AddError(errors.New("must at least pass one creator in CreatorIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("creator IN (?)", creator))
}

// CreatorNe is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfQuerySet) CreatorNe(creator string) BcsServiceConfQuerySet {
	return qs.w(qs.db.Where("creator != ?", creator))
}

// CreatorNotIn is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfQuerySet) CreatorNotIn(creator ...string) BcsServiceConfQuerySet {
	if len(creator) == 0 {
		qs.db.AddError(errors.New("must at least pass one creator in CreatorNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("creator NOT IN (?)", creator))
}

// Delete is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfQuerySet) Delete() error {
	return qs.db.Delete(BcsServiceConf{}).Error
}

// DeleteNum is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfQuerySet) DeleteNum() (int64, error) {
	db := qs.db.Delete(BcsServiceConf{})
	return db.RowsAffected, db.Error
}

// DeleteNumUnscoped is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfQuerySet) DeleteNumUnscoped() (int64, error) {
	db := qs.db.Unscoped().Delete(BcsServiceConf{})
	return db.RowsAffected, db.Error
}

// DeletedAtEq is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfQuerySet) DeletedAtEq(deletedAt time.Time) BcsServiceConfQuerySet {
	return qs.w(qs.db.Where("deleted_at = ?", deletedAt))
}

// DeletedAtGt is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfQuerySet) DeletedAtGt(deletedAt time.Time) BcsServiceConfQuerySet {
	return qs.w(qs.db.Where("deleted_at > ?", deletedAt))
}

// DeletedAtGte is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfQuerySet) DeletedAtGte(deletedAt time.Time) BcsServiceConfQuerySet {
	return qs.w(qs.db.Where("deleted_at >= ?", deletedAt))
}

// DeletedAtIsNotNull is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfQuerySet) DeletedAtIsNotNull() BcsServiceConfQuerySet {
	return qs.w(qs.db.Where("deleted_at IS NOT NULL"))
}

// DeletedAtIsNull is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfQuerySet) DeletedAtIsNull() BcsServiceConfQuerySet {
	return qs.w(qs.db.Where("deleted_at IS NULL"))
}

// DeletedAtLt is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfQuerySet) DeletedAtLt(deletedAt time.Time) BcsServiceConfQuerySet {
	return qs.w(qs.db.Where("deleted_at < ?", deletedAt))
}

// DeletedAtLte is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfQuerySet) DeletedAtLte(deletedAt time.Time) BcsServiceConfQuerySet {
	return qs.w(qs.db.Where("deleted_at <= ?", deletedAt))
}

// DeletedAtNe is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfQuerySet) DeletedAtNe(deletedAt time.Time) BcsServiceConfQuerySet {
	return qs.w(qs.db.Where("deleted_at != ?", deletedAt))
}

// DescriptionEq is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfQuerySet) DescriptionEq(description string) BcsServiceConfQuerySet {
	return qs.w(qs.db.Where("description = ?", description))
}

// DescriptionIn is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfQuerySet) DescriptionIn(description ...string) BcsServiceConfQuerySet {
	if len(description) == 0 {
		qs.db.AddError(errors.New("must at least pass one description in DescriptionIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("description IN (?)", description))
}

// DescriptionNe is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfQuerySet) DescriptionNe(description string) BcsServiceConfQuerySet {
	return qs.w(qs.db.Where("description != ?", description))
}

// DescriptionNotIn is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfQuerySet) DescriptionNotIn(description ...string) BcsServiceConfQuerySet {
	if len(description) == 0 {
		qs.db.AddError(errors.New("must at least pass one description in DescriptionNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("description NOT IN (?)", description))
}

// EnvironmentEq is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfQuerySet) EnvironmentEq(environment string) BcsServiceConfQuerySet {
	return qs.w(qs.db.Where("environment = ?", environment))
}

// EnvironmentIn is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfQuerySet) EnvironmentIn(environment ...string) BcsServiceConfQuerySet {
	if len(environment) == 0 {
		qs.db.AddError(errors.New("must at least pass one environment in EnvironmentIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("environment IN (?)", environment))
}

// EnvironmentNe is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfQuerySet) EnvironmentNe(environment string) BcsServiceConfQuerySet {
	return qs.w(qs.db.Where("environment != ?", environment))
}

// EnvironmentNotIn is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfQuerySet) EnvironmentNotIn(environment ...string) BcsServiceConfQuerySet {
	if len(environment) == 0 {
		qs.db.AddError(errors.New("must at least pass one environment in EnvironmentNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("environment NOT IN (?)", environment))
}

// ExtraEq is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfQuerySet) ExtraEq(extra string) BcsServiceConfQuerySet {
	return qs.w(qs.db.Where("extra = ?", extra))
}

// ExtraIn is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfQuerySet) ExtraIn(extra ...string) BcsServiceConfQuerySet {
	if len(extra) == 0 {
		qs.db.AddError(errors.New("must at least pass one extra in ExtraIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("extra IN (?)", extra))
}

// ExtraNe is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfQuerySet) ExtraNe(extra string) BcsServiceConfQuerySet {
	return qs.w(qs.db.Where("extra != ?", extra))
}

// ExtraNotIn is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfQuerySet) ExtraNotIn(extra ...string) BcsServiceConfQuerySet {
	if len(extra) == 0 {
		qs.db.AddError(errors.New("must at least pass one extra in ExtraNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("extra NOT IN (?)", extra))
}

// GetDB is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfQuerySet) GetDB() *gorm.DB {
	return qs.db
}

// GetUpdater is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfQuerySet) GetUpdater() BcsServiceConfUpdater {
	return NewBcsServiceConfUpdater(qs.db)
}

// IDEq is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfQuerySet) IDEq(ID uint) BcsServiceConfQuerySet {
	return qs.w(qs.db.Where("id = ?", ID))
}

// IDGt is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfQuerySet) IDGt(ID uint) BcsServiceConfQuerySet {
	return qs.w(qs.db.Where("id > ?", ID))
}

// IDGte is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfQuerySet) IDGte(ID uint) BcsServiceConfQuerySet {
	return qs.w(qs.db.Where("id >= ?", ID))
}

// IDIn is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfQuerySet) IDIn(ID ...uint) BcsServiceConfQuerySet {
	if len(ID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ID in IDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("id IN (?)", ID))
}

// IDLt is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfQuerySet) IDLt(ID uint) BcsServiceConfQuerySet {
	return qs.w(qs.db.Where("id < ?", ID))
}

// IDLte is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfQuerySet) IDLte(ID uint) BcsServiceConfQuerySet {
	return qs.w(qs.db.Where("id <= ?", ID))
}

// IDNe is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfQuerySet) IDNe(ID uint) BcsServiceConfQuerySet {
	return qs.w(qs.db.Where("id != ?", ID))
}

// IDNotIn is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfQuerySet) IDNotIn(ID ...uint) BcsServiceConfQuerySet {
	if len(ID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ID in IDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("id NOT IN (?)", ID))
}

// KindNameEq is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfQuerySet) KindNameEq(kindName string) BcsServiceConfQuerySet {
	return qs.w(qs.db.Where("kind_name = ?", kindName))
}

// KindNameIn is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfQuerySet) KindNameIn(kindName ...string) BcsServiceConfQuerySet {
	if len(kindName) == 0 {
		qs.db.AddError(errors.New("must at least pass one kindName in KindNameIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("kind_name IN (?)", kindName))
}

// KindNameNe is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfQuerySet) KindNameNe(kindName string) BcsServiceConfQuerySet {
	return qs.w(qs.db.Where("kind_name != ?", kindName))
}

// KindNameNotIn is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfQuerySet) KindNameNotIn(kindName ...string) BcsServiceConfQuerySet {
	if len(kindName) == 0 {
		qs.db.AddError(errors.New("must at least pass one kindName in KindNameNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("kind_name NOT IN (?)", kindName))
}

// Limit is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfQuerySet) Limit(limit int) BcsServiceConfQuerySet {
	return qs.w(qs.db.Limit(limit))
}

// Offset is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfQuerySet) Offset(offset int) BcsServiceConfQuerySet {
	return qs.w(qs.db.Offset(offset))
}

// One is used to retrieve one result. It returns gorm.ErrRecordNotFound
// if nothing was fetched
func (qs BcsServiceConfQuerySet) One(ret *BcsServiceConf) error {
	return qs.db.First(ret).Error
}

// OrderAscByCreatedAt is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfQuerySet) OrderAscByCreatedAt() BcsServiceConfQuerySet {
	return qs.w(qs.db.Order("created_at ASC"))
}

// OrderAscByDeletedAt is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfQuerySet) OrderAscByDeletedAt() BcsServiceConfQuerySet {
	return qs.w(qs.db.Order("deleted_at ASC"))
}

// OrderAscByID is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfQuerySet) OrderAscByID() BcsServiceConfQuerySet {
	return qs.w(qs.db.Order("id ASC"))
}

// OrderAscByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfQuerySet) OrderAscByUpdatedAt() BcsServiceConfQuerySet {
	return qs.w(qs.db.Order("updated_at ASC"))
}

// OrderDescByCreatedAt is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfQuerySet) OrderDescByCreatedAt() BcsServiceConfQuerySet {
	return qs.w(qs.db.Order("created_at DESC"))
}

// OrderDescByDeletedAt is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfQuerySet) OrderDescByDeletedAt() BcsServiceConfQuerySet {
	return qs.w(qs.db.Order("deleted_at DESC"))
}

// OrderDescByID is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfQuerySet) OrderDescByID() BcsServiceConfQuerySet {
	return qs.w(qs.db.Order("id DESC"))
}

// OrderDescByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfQuerySet) OrderDescByUpdatedAt() BcsServiceConfQuerySet {
	return qs.w(qs.db.Order("updated_at DESC"))
}

// UpdatedAtEq is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfQuerySet) UpdatedAtEq(updatedAt time.Time) BcsServiceConfQuerySet {
	return qs.w(qs.db.Where("updated_at = ?", updatedAt))
}

// UpdatedAtGt is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfQuerySet) UpdatedAtGt(updatedAt time.Time) BcsServiceConfQuerySet {
	return qs.w(qs.db.Where("updated_at > ?", updatedAt))
}

// UpdatedAtGte is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfQuerySet) UpdatedAtGte(updatedAt time.Time) BcsServiceConfQuerySet {
	return qs.w(qs.db.Where("updated_at >= ?", updatedAt))
}

// UpdatedAtLt is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfQuerySet) UpdatedAtLt(updatedAt time.Time) BcsServiceConfQuerySet {
	return qs.w(qs.db.Where("updated_at < ?", updatedAt))
}

// UpdatedAtLte is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfQuerySet) UpdatedAtLte(updatedAt time.Time) BcsServiceConfQuerySet {
	return qs.w(qs.db.Where("updated_at <= ?", updatedAt))
}

// UpdatedAtNe is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfQuerySet) UpdatedAtNe(updatedAt time.Time) BcsServiceConfQuerySet {
	return qs.w(qs.db.Where("updated_at != ?", updatedAt))
}

// SetConfiguration is an autogenerated method
// nolint: dupl
func (u BcsServiceConfUpdater) SetConfiguration(configuration string) BcsServiceConfUpdater {
	u.fields[string(BcsServiceConfDBSchema.Configuration)] = configuration
	return u
}

// SetCreatedAt is an autogenerated method
// nolint: dupl
func (u BcsServiceConfUpdater) SetCreatedAt(createdAt time.Time) BcsServiceConfUpdater {
	u.fields[string(BcsServiceConfDBSchema.CreatedAt)] = createdAt
	return u
}

// SetCreator is an autogenerated method
// nolint: dupl
func (u BcsServiceConfUpdater) SetCreator(creator string) BcsServiceConfUpdater {
	u.fields[string(BcsServiceConfDBSchema.Creator)] = creator
	return u
}

// SetDeletedAt is an autogenerated method
// nolint: dupl
func (u BcsServiceConfUpdater) SetDeletedAt(deletedAt *time.Time) BcsServiceConfUpdater {
	u.fields[string(BcsServiceConfDBSchema.DeletedAt)] = deletedAt
	return u
}

// SetDescription is an autogenerated method
// nolint: dupl
func (u BcsServiceConfUpdater) SetDescription(description string) BcsServiceConfUpdater {
	u.fields[string(BcsServiceConfDBSchema.Description)] = description
	return u
}

// SetEnvironment is an autogenerated method
// nolint: dupl
func (u BcsServiceConfUpdater) SetEnvironment(environment string) BcsServiceConfUpdater {
	u.fields[string(BcsServiceConfDBSchema.Environment)] = environment
	return u
}

// SetExtra is an autogenerated method
// nolint: dupl
func (u BcsServiceConfUpdater) SetExtra(extra string) BcsServiceConfUpdater {
	u.fields[string(BcsServiceConfDBSchema.Extra)] = extra
	return u
}

// SetID is an autogenerated method
// nolint: dupl
func (u BcsServiceConfUpdater) SetID(ID uint) BcsServiceConfUpdater {
	u.fields[string(BcsServiceConfDBSchema.ID)] = ID
	return u
}

// SetKindName is an autogenerated method
// nolint: dupl
func (u BcsServiceConfUpdater) SetKindName(kindName string) BcsServiceConfUpdater {
	u.fields[string(BcsServiceConfDBSchema.KindName)] = kindName
	return u
}

// SetUpdatedAt is an autogenerated method
// nolint: dupl
func (u BcsServiceConfUpdater) SetUpdatedAt(updatedAt time.Time) BcsServiceConfUpdater {
	u.fields[string(BcsServiceConfDBSchema.UpdatedAt)] = updatedAt
	return u
}

// Update is an autogenerated method
// nolint: dupl
func (u BcsServiceConfUpdater) Update() error {
	return u.db.Updates(u.fields).Error
}

// UpdateNum is an autogenerated method
// nolint: dupl
func (u BcsServiceConfUpdater) UpdateNum() (int64, error) {
	db := u.db.Updates(u.fields)
	return db.RowsAffected, db.Error
}

// ===== END of query set BcsServiceConfQuerySet

// ===== BEGIN of BcsServiceConf modifiers

// BcsServiceConfDBSchemaField describes database schema field. It requires for method 'Update'
type BcsServiceConfDBSchemaField string

// String method returns string representation of field.
// nolint: dupl
func (f BcsServiceConfDBSchemaField) String() string {
	return string(f)
}

// BcsServiceConfDBSchema stores db field names of BcsServiceConf
var BcsServiceConfDBSchema = struct {
	ID            BcsServiceConfDBSchemaField
	CreatedAt     BcsServiceConfDBSchemaField
	UpdatedAt     BcsServiceConfDBSchemaField
	DeletedAt     BcsServiceConfDBSchemaField
	Extra         BcsServiceConfDBSchemaField
	KindName      BcsServiceConfDBSchemaField
	Environment   BcsServiceConfDBSchemaField
	Description   BcsServiceConfDBSchemaField
	Configuration BcsServiceConfDBSchemaField
	Creator       BcsServiceConfDBSchemaField
}{

	ID:            BcsServiceConfDBSchemaField("id"),
	CreatedAt:     BcsServiceConfDBSchemaField("created_at"),
	UpdatedAt:     BcsServiceConfDBSchemaField("updated_at"),
	DeletedAt:     BcsServiceConfDBSchemaField("deleted_at"),
	Extra:         BcsServiceConfDBSchemaField("extra"),
	KindName:      BcsServiceConfDBSchemaField("kind_name"),
	Environment:   BcsServiceConfDBSchemaField("environment"),
	Description:   BcsServiceConfDBSchemaField("description"),
	Configuration: BcsServiceConfDBSchemaField("configuration"),
	Creator:       BcsServiceConfDBSchemaField("creator"),
}

// Update updates BcsServiceConf fields by primary key
// nolint: dupl
func (o *BcsServiceConf) Update(db *gorm.DB, fields ...BcsServiceConfDBSchemaField) error {
	dbNameToFieldName := map[string]interface{}{
		"id":            o.ID,
		"created_at":    o.CreatedAt,
		"updated_at":    o.UpdatedAt,
		"deleted_at":    o.DeletedAt,
		"extra":         o.Extra,
		"kind_name":     o.KindName,
		"environment":   o.Environment,
		"description":   o.Description,
		"configuration": o.Configuration,
		"creator":       o.Creator,
	}
	u := map[string]interface{}{}
	for _, f := range fields {
		fs := f.String()
		u[fs] = dbNameToFieldName[fs]
	}
	if err := db.Model(o).Updates(u).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return err
		}

		return fmt.Errorf("can't update BcsServiceConf %v fields %v: %s",
			o, fields, err)
	}

	return nil
}

// BcsServiceConfUpdater is an BcsServiceConf updates manager
type BcsServiceConfUpdater struct {
	fields map[string]interface{}
	db     *gorm.DB
}

// NewBcsServiceConfUpdater creates new BcsServiceConf updater
// nolint: dupl
func NewBcsServiceConfUpdater(db *gorm.DB) BcsServiceConfUpdater {
	return BcsServiceConfUpdater{
		fields: map[string]interface{}{},
		db:     db.Model(&BcsServiceConf{}),
	}
}

// ===== END of BcsServiceConf modifiers

// ===== END of all query sets
