// Code generated by go-queryset. DO NOT EDIT.
package models

import (
	"errors"
	"fmt"
	"time"

	"github.com/jinzhu/gorm"
)

// ===== BEGIN of all query sets

// ===== BEGIN of query set BaseVersionQuerySet

// BaseVersionQuerySet is an queryset type for BaseVersion
type BaseVersionQuerySet struct {
	db *gorm.DB
}

// NewBaseVersionQuerySet constructs new BaseVersionQuerySet
func NewBaseVersionQuerySet(db *gorm.DB) BaseVersionQuerySet {
	return BaseVersionQuerySet{
		db: db.Model(&BaseVersion{}),
	}
}

func (qs BaseVersionQuerySet) w(db *gorm.DB) BaseVersionQuerySet {
	return NewBaseVersionQuerySet(db)
}

// Create is an autogenerated method
// nolint: dupl
func (o *BaseVersion) Create(db *gorm.DB) error {
	return db.Create(o).Error
}

// Delete is an autogenerated method
// nolint: dupl
func (o *BaseVersion) Delete(db *gorm.DB) error {
	return db.Delete(o).Error
}

// All is an autogenerated method
// nolint: dupl
func (qs BaseVersionQuerySet) All(ret *[]BaseVersion) error {
	return qs.db.Find(ret).Error
}

// ConfigureEq is an autogenerated method
// nolint: dupl
func (qs BaseVersionQuerySet) ConfigureEq(configure string) BaseVersionQuerySet {
	return qs.w(qs.db.Where("configure = ?", configure))
}

// ConfigureIn is an autogenerated method
// nolint: dupl
func (qs BaseVersionQuerySet) ConfigureIn(configure ...string) BaseVersionQuerySet {
	if len(configure) == 0 {
		qs.db.AddError(errors.New("must at least pass one configure in ConfigureIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("configure IN (?)", configure))
}

// ConfigureNe is an autogenerated method
// nolint: dupl
func (qs BaseVersionQuerySet) ConfigureNe(configure string) BaseVersionQuerySet {
	return qs.w(qs.db.Where("configure != ?", configure))
}

// ConfigureNotIn is an autogenerated method
// nolint: dupl
func (qs BaseVersionQuerySet) ConfigureNotIn(configure ...string) BaseVersionQuerySet {
	if len(configure) == 0 {
		qs.db.AddError(errors.New("must at least pass one configure in ConfigureNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("configure NOT IN (?)", configure))
}

// Count is an autogenerated method
// nolint: dupl
func (qs BaseVersionQuerySet) Count() (int, error) {
	var count int
	err := qs.db.Count(&count).Error
	return count, err
}

// CreatedAtEq is an autogenerated method
// nolint: dupl
func (qs BaseVersionQuerySet) CreatedAtEq(createdAt time.Time) BaseVersionQuerySet {
	return qs.w(qs.db.Where("created_at = ?", createdAt))
}

// CreatedAtGt is an autogenerated method
// nolint: dupl
func (qs BaseVersionQuerySet) CreatedAtGt(createdAt time.Time) BaseVersionQuerySet {
	return qs.w(qs.db.Where("created_at > ?", createdAt))
}

// CreatedAtGte is an autogenerated method
// nolint: dupl
func (qs BaseVersionQuerySet) CreatedAtGte(createdAt time.Time) BaseVersionQuerySet {
	return qs.w(qs.db.Where("created_at >= ?", createdAt))
}

// CreatedAtLt is an autogenerated method
// nolint: dupl
func (qs BaseVersionQuerySet) CreatedAtLt(createdAt time.Time) BaseVersionQuerySet {
	return qs.w(qs.db.Where("created_at < ?", createdAt))
}

// CreatedAtLte is an autogenerated method
// nolint: dupl
func (qs BaseVersionQuerySet) CreatedAtLte(createdAt time.Time) BaseVersionQuerySet {
	return qs.w(qs.db.Where("created_at <= ?", createdAt))
}

// CreatedAtNe is an autogenerated method
// nolint: dupl
func (qs BaseVersionQuerySet) CreatedAtNe(createdAt time.Time) BaseVersionQuerySet {
	return qs.w(qs.db.Where("created_at != ?", createdAt))
}

// CreatorEq is an autogenerated method
// nolint: dupl
func (qs BaseVersionQuerySet) CreatorEq(creator string) BaseVersionQuerySet {
	return qs.w(qs.db.Where("creator = ?", creator))
}

// CreatorIn is an autogenerated method
// nolint: dupl
func (qs BaseVersionQuerySet) CreatorIn(creator ...string) BaseVersionQuerySet {
	if len(creator) == 0 {
		qs.db.AddError(errors.New("must at least pass one creator in CreatorIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("creator IN (?)", creator))
}

// CreatorNe is an autogenerated method
// nolint: dupl
func (qs BaseVersionQuerySet) CreatorNe(creator string) BaseVersionQuerySet {
	return qs.w(qs.db.Where("creator != ?", creator))
}

// CreatorNotIn is an autogenerated method
// nolint: dupl
func (qs BaseVersionQuerySet) CreatorNotIn(creator ...string) BaseVersionQuerySet {
	if len(creator) == 0 {
		qs.db.AddError(errors.New("must at least pass one creator in CreatorNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("creator NOT IN (?)", creator))
}

// Delete is an autogenerated method
// nolint: dupl
func (qs BaseVersionQuerySet) Delete() error {
	return qs.db.Delete(BaseVersion{}).Error
}

// DeleteNum is an autogenerated method
// nolint: dupl
func (qs BaseVersionQuerySet) DeleteNum() (int64, error) {
	db := qs.db.Delete(BaseVersion{})
	return db.RowsAffected, db.Error
}

// DeleteNumUnscoped is an autogenerated method
// nolint: dupl
func (qs BaseVersionQuerySet) DeleteNumUnscoped() (int64, error) {
	db := qs.db.Unscoped().Delete(BaseVersion{})
	return db.RowsAffected, db.Error
}

// DeletedAtEq is an autogenerated method
// nolint: dupl
func (qs BaseVersionQuerySet) DeletedAtEq(deletedAt time.Time) BaseVersionQuerySet {
	return qs.w(qs.db.Where("deleted_at = ?", deletedAt))
}

// DeletedAtGt is an autogenerated method
// nolint: dupl
func (qs BaseVersionQuerySet) DeletedAtGt(deletedAt time.Time) BaseVersionQuerySet {
	return qs.w(qs.db.Where("deleted_at > ?", deletedAt))
}

// DeletedAtGte is an autogenerated method
// nolint: dupl
func (qs BaseVersionQuerySet) DeletedAtGte(deletedAt time.Time) BaseVersionQuerySet {
	return qs.w(qs.db.Where("deleted_at >= ?", deletedAt))
}

// DeletedAtIsNotNull is an autogenerated method
// nolint: dupl
func (qs BaseVersionQuerySet) DeletedAtIsNotNull() BaseVersionQuerySet {
	return qs.w(qs.db.Where("deleted_at IS NOT NULL"))
}

// DeletedAtIsNull is an autogenerated method
// nolint: dupl
func (qs BaseVersionQuerySet) DeletedAtIsNull() BaseVersionQuerySet {
	return qs.w(qs.db.Where("deleted_at IS NULL"))
}

// DeletedAtLt is an autogenerated method
// nolint: dupl
func (qs BaseVersionQuerySet) DeletedAtLt(deletedAt time.Time) BaseVersionQuerySet {
	return qs.w(qs.db.Where("deleted_at < ?", deletedAt))
}

// DeletedAtLte is an autogenerated method
// nolint: dupl
func (qs BaseVersionQuerySet) DeletedAtLte(deletedAt time.Time) BaseVersionQuerySet {
	return qs.w(qs.db.Where("deleted_at <= ?", deletedAt))
}

// DeletedAtNe is an autogenerated method
// nolint: dupl
func (qs BaseVersionQuerySet) DeletedAtNe(deletedAt time.Time) BaseVersionQuerySet {
	return qs.w(qs.db.Where("deleted_at != ?", deletedAt))
}

// EnvironmentEq is an autogenerated method
// nolint: dupl
func (qs BaseVersionQuerySet) EnvironmentEq(environment string) BaseVersionQuerySet {
	return qs.w(qs.db.Where("environment = ?", environment))
}

// EnvironmentIn is an autogenerated method
// nolint: dupl
func (qs BaseVersionQuerySet) EnvironmentIn(environment ...string) BaseVersionQuerySet {
	if len(environment) == 0 {
		qs.db.AddError(errors.New("must at least pass one environment in EnvironmentIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("environment IN (?)", environment))
}

// EnvironmentNe is an autogenerated method
// nolint: dupl
func (qs BaseVersionQuerySet) EnvironmentNe(environment string) BaseVersionQuerySet {
	return qs.w(qs.db.Where("environment != ?", environment))
}

// EnvironmentNotIn is an autogenerated method
// nolint: dupl
func (qs BaseVersionQuerySet) EnvironmentNotIn(environment ...string) BaseVersionQuerySet {
	if len(environment) == 0 {
		qs.db.AddError(errors.New("must at least pass one environment in EnvironmentNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("environment NOT IN (?)", environment))
}

// ExtraEq is an autogenerated method
// nolint: dupl
func (qs BaseVersionQuerySet) ExtraEq(extra string) BaseVersionQuerySet {
	return qs.w(qs.db.Where("extra = ?", extra))
}

// ExtraIn is an autogenerated method
// nolint: dupl
func (qs BaseVersionQuerySet) ExtraIn(extra ...string) BaseVersionQuerySet {
	if len(extra) == 0 {
		qs.db.AddError(errors.New("must at least pass one extra in ExtraIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("extra IN (?)", extra))
}

// ExtraNe is an autogenerated method
// nolint: dupl
func (qs BaseVersionQuerySet) ExtraNe(extra string) BaseVersionQuerySet {
	return qs.w(qs.db.Where("extra != ?", extra))
}

// ExtraNotIn is an autogenerated method
// nolint: dupl
func (qs BaseVersionQuerySet) ExtraNotIn(extra ...string) BaseVersionQuerySet {
	if len(extra) == 0 {
		qs.db.AddError(errors.New("must at least pass one extra in ExtraNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("extra NOT IN (?)", extra))
}

// GetDB is an autogenerated method
// nolint: dupl
func (qs BaseVersionQuerySet) GetDB() *gorm.DB {
	return qs.db
}

// GetUpdater is an autogenerated method
// nolint: dupl
func (qs BaseVersionQuerySet) GetUpdater() BaseVersionUpdater {
	return NewBaseVersionUpdater(qs.db)
}

// IDEq is an autogenerated method
// nolint: dupl
func (qs BaseVersionQuerySet) IDEq(ID uint) BaseVersionQuerySet {
	return qs.w(qs.db.Where("id = ?", ID))
}

// IDGt is an autogenerated method
// nolint: dupl
func (qs BaseVersionQuerySet) IDGt(ID uint) BaseVersionQuerySet {
	return qs.w(qs.db.Where("id > ?", ID))
}

// IDGte is an autogenerated method
// nolint: dupl
func (qs BaseVersionQuerySet) IDGte(ID uint) BaseVersionQuerySet {
	return qs.w(qs.db.Where("id >= ?", ID))
}

// IDIn is an autogenerated method
// nolint: dupl
func (qs BaseVersionQuerySet) IDIn(ID ...uint) BaseVersionQuerySet {
	if len(ID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ID in IDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("id IN (?)", ID))
}

// IDLt is an autogenerated method
// nolint: dupl
func (qs BaseVersionQuerySet) IDLt(ID uint) BaseVersionQuerySet {
	return qs.w(qs.db.Where("id < ?", ID))
}

// IDLte is an autogenerated method
// nolint: dupl
func (qs BaseVersionQuerySet) IDLte(ID uint) BaseVersionQuerySet {
	return qs.w(qs.db.Where("id <= ?", ID))
}

// IDNe is an autogenerated method
// nolint: dupl
func (qs BaseVersionQuerySet) IDNe(ID uint) BaseVersionQuerySet {
	return qs.w(qs.db.Where("id != ?", ID))
}

// IDNotIn is an autogenerated method
// nolint: dupl
func (qs BaseVersionQuerySet) IDNotIn(ID ...uint) BaseVersionQuerySet {
	if len(ID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ID in IDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("id NOT IN (?)", ID))
}

// KindEq is an autogenerated method
// nolint: dupl
func (qs BaseVersionQuerySet) KindEq(kind string) BaseVersionQuerySet {
	return qs.w(qs.db.Where("kind = ?", kind))
}

// KindIn is an autogenerated method
// nolint: dupl
func (qs BaseVersionQuerySet) KindIn(kind ...string) BaseVersionQuerySet {
	if len(kind) == 0 {
		qs.db.AddError(errors.New("must at least pass one kind in KindIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("kind IN (?)", kind))
}

// KindNe is an autogenerated method
// nolint: dupl
func (qs BaseVersionQuerySet) KindNe(kind string) BaseVersionQuerySet {
	return qs.w(qs.db.Where("kind != ?", kind))
}

// KindNotIn is an autogenerated method
// nolint: dupl
func (qs BaseVersionQuerySet) KindNotIn(kind ...string) BaseVersionQuerySet {
	if len(kind) == 0 {
		qs.db.AddError(errors.New("must at least pass one kind in KindNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("kind NOT IN (?)", kind))
}

// Limit is an autogenerated method
// nolint: dupl
func (qs BaseVersionQuerySet) Limit(limit int) BaseVersionQuerySet {
	return qs.w(qs.db.Limit(limit))
}

// Offset is an autogenerated method
// nolint: dupl
func (qs BaseVersionQuerySet) Offset(offset int) BaseVersionQuerySet {
	return qs.w(qs.db.Offset(offset))
}

// One is used to retrieve one result. It returns gorm.ErrRecordNotFound
// if nothing was fetched
func (qs BaseVersionQuerySet) One(ret *BaseVersion) error {
	return qs.db.First(ret).Error
}

// OrderAscByCreatedAt is an autogenerated method
// nolint: dupl
func (qs BaseVersionQuerySet) OrderAscByCreatedAt() BaseVersionQuerySet {
	return qs.w(qs.db.Order("created_at ASC"))
}

// OrderAscByDeletedAt is an autogenerated method
// nolint: dupl
func (qs BaseVersionQuerySet) OrderAscByDeletedAt() BaseVersionQuerySet {
	return qs.w(qs.db.Order("deleted_at ASC"))
}

// OrderAscByID is an autogenerated method
// nolint: dupl
func (qs BaseVersionQuerySet) OrderAscByID() BaseVersionQuerySet {
	return qs.w(qs.db.Order("id ASC"))
}

// OrderAscByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs BaseVersionQuerySet) OrderAscByUpdatedAt() BaseVersionQuerySet {
	return qs.w(qs.db.Order("updated_at ASC"))
}

// OrderDescByCreatedAt is an autogenerated method
// nolint: dupl
func (qs BaseVersionQuerySet) OrderDescByCreatedAt() BaseVersionQuerySet {
	return qs.w(qs.db.Order("created_at DESC"))
}

// OrderDescByDeletedAt is an autogenerated method
// nolint: dupl
func (qs BaseVersionQuerySet) OrderDescByDeletedAt() BaseVersionQuerySet {
	return qs.w(qs.db.Order("deleted_at DESC"))
}

// OrderDescByID is an autogenerated method
// nolint: dupl
func (qs BaseVersionQuerySet) OrderDescByID() BaseVersionQuerySet {
	return qs.w(qs.db.Order("id DESC"))
}

// OrderDescByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs BaseVersionQuerySet) OrderDescByUpdatedAt() BaseVersionQuerySet {
	return qs.w(qs.db.Order("updated_at DESC"))
}

// SubVersionEq is an autogenerated method
// nolint: dupl
func (qs BaseVersionQuerySet) SubVersionEq(subVersion string) BaseVersionQuerySet {
	return qs.w(qs.db.Where("sub_version = ?", subVersion))
}

// SubVersionIn is an autogenerated method
// nolint: dupl
func (qs BaseVersionQuerySet) SubVersionIn(subVersion ...string) BaseVersionQuerySet {
	if len(subVersion) == 0 {
		qs.db.AddError(errors.New("must at least pass one subVersion in SubVersionIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("sub_version IN (?)", subVersion))
}

// SubVersionNe is an autogenerated method
// nolint: dupl
func (qs BaseVersionQuerySet) SubVersionNe(subVersion string) BaseVersionQuerySet {
	return qs.w(qs.db.Where("sub_version != ?", subVersion))
}

// SubVersionNotIn is an autogenerated method
// nolint: dupl
func (qs BaseVersionQuerySet) SubVersionNotIn(subVersion ...string) BaseVersionQuerySet {
	if len(subVersion) == 0 {
		qs.db.AddError(errors.New("must at least pass one subVersion in SubVersionNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("sub_version NOT IN (?)", subVersion))
}

// UpdatedAtEq is an autogenerated method
// nolint: dupl
func (qs BaseVersionQuerySet) UpdatedAtEq(updatedAt time.Time) BaseVersionQuerySet {
	return qs.w(qs.db.Where("updated_at = ?", updatedAt))
}

// UpdatedAtGt is an autogenerated method
// nolint: dupl
func (qs BaseVersionQuerySet) UpdatedAtGt(updatedAt time.Time) BaseVersionQuerySet {
	return qs.w(qs.db.Where("updated_at > ?", updatedAt))
}

// UpdatedAtGte is an autogenerated method
// nolint: dupl
func (qs BaseVersionQuerySet) UpdatedAtGte(updatedAt time.Time) BaseVersionQuerySet {
	return qs.w(qs.db.Where("updated_at >= ?", updatedAt))
}

// UpdatedAtLt is an autogenerated method
// nolint: dupl
func (qs BaseVersionQuerySet) UpdatedAtLt(updatedAt time.Time) BaseVersionQuerySet {
	return qs.w(qs.db.Where("updated_at < ?", updatedAt))
}

// UpdatedAtLte is an autogenerated method
// nolint: dupl
func (qs BaseVersionQuerySet) UpdatedAtLte(updatedAt time.Time) BaseVersionQuerySet {
	return qs.w(qs.db.Where("updated_at <= ?", updatedAt))
}

// UpdatedAtNe is an autogenerated method
// nolint: dupl
func (qs BaseVersionQuerySet) UpdatedAtNe(updatedAt time.Time) BaseVersionQuerySet {
	return qs.w(qs.db.Where("updated_at != ?", updatedAt))
}

// VersionEq is an autogenerated method
// nolint: dupl
func (qs BaseVersionQuerySet) VersionEq(version string) BaseVersionQuerySet {
	return qs.w(qs.db.Where("version = ?", version))
}

// VersionIn is an autogenerated method
// nolint: dupl
func (qs BaseVersionQuerySet) VersionIn(version ...string) BaseVersionQuerySet {
	if len(version) == 0 {
		qs.db.AddError(errors.New("must at least pass one version in VersionIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("version IN (?)", version))
}

// VersionNe is an autogenerated method
// nolint: dupl
func (qs BaseVersionQuerySet) VersionNe(version string) BaseVersionQuerySet {
	return qs.w(qs.db.Where("version != ?", version))
}

// VersionNotIn is an autogenerated method
// nolint: dupl
func (qs BaseVersionQuerySet) VersionNotIn(version ...string) BaseVersionQuerySet {
	if len(version) == 0 {
		qs.db.AddError(errors.New("must at least pass one version in VersionNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("version NOT IN (?)", version))
}

// SetConfigure is an autogenerated method
// nolint: dupl
func (u BaseVersionUpdater) SetConfigure(configure string) BaseVersionUpdater {
	u.fields[string(BaseVersionDBSchema.Configure)] = configure
	return u
}

// SetCreatedAt is an autogenerated method
// nolint: dupl
func (u BaseVersionUpdater) SetCreatedAt(createdAt time.Time) BaseVersionUpdater {
	u.fields[string(BaseVersionDBSchema.CreatedAt)] = createdAt
	return u
}

// SetCreator is an autogenerated method
// nolint: dupl
func (u BaseVersionUpdater) SetCreator(creator string) BaseVersionUpdater {
	u.fields[string(BaseVersionDBSchema.Creator)] = creator
	return u
}

// SetDeletedAt is an autogenerated method
// nolint: dupl
func (u BaseVersionUpdater) SetDeletedAt(deletedAt *time.Time) BaseVersionUpdater {
	u.fields[string(BaseVersionDBSchema.DeletedAt)] = deletedAt
	return u
}

// SetEnvironment is an autogenerated method
// nolint: dupl
func (u BaseVersionUpdater) SetEnvironment(environment string) BaseVersionUpdater {
	u.fields[string(BaseVersionDBSchema.Environment)] = environment
	return u
}

// SetExtra is an autogenerated method
// nolint: dupl
func (u BaseVersionUpdater) SetExtra(extra string) BaseVersionUpdater {
	u.fields[string(BaseVersionDBSchema.Extra)] = extra
	return u
}

// SetID is an autogenerated method
// nolint: dupl
func (u BaseVersionUpdater) SetID(ID uint) BaseVersionUpdater {
	u.fields[string(BaseVersionDBSchema.ID)] = ID
	return u
}

// SetKind is an autogenerated method
// nolint: dupl
func (u BaseVersionUpdater) SetKind(kind string) BaseVersionUpdater {
	u.fields[string(BaseVersionDBSchema.Kind)] = kind
	return u
}

// SetSubVersion is an autogenerated method
// nolint: dupl
func (u BaseVersionUpdater) SetSubVersion(subVersion string) BaseVersionUpdater {
	u.fields[string(BaseVersionDBSchema.SubVersion)] = subVersion
	return u
}

// SetUpdatedAt is an autogenerated method
// nolint: dupl
func (u BaseVersionUpdater) SetUpdatedAt(updatedAt time.Time) BaseVersionUpdater {
	u.fields[string(BaseVersionDBSchema.UpdatedAt)] = updatedAt
	return u
}

// SetVersion is an autogenerated method
// nolint: dupl
func (u BaseVersionUpdater) SetVersion(version string) BaseVersionUpdater {
	u.fields[string(BaseVersionDBSchema.Version)] = version
	return u
}

// Update is an autogenerated method
// nolint: dupl
func (u BaseVersionUpdater) Update() error {
	return u.db.Updates(u.fields).Error
}

// UpdateNum is an autogenerated method
// nolint: dupl
func (u BaseVersionUpdater) UpdateNum() (int64, error) {
	db := u.db.Updates(u.fields)
	return db.RowsAffected, db.Error
}

// ===== END of query set BaseVersionQuerySet

// ===== BEGIN of BaseVersion modifiers

// BaseVersionDBSchemaField describes database schema field. It requires for method 'Update'
type BaseVersionDBSchemaField string

// String method returns string representation of field.
// nolint: dupl
func (f BaseVersionDBSchemaField) String() string {
	return string(f)
}

// BaseVersionDBSchema stores db field names of BaseVersion
var BaseVersionDBSchema = struct {
	ID          BaseVersionDBSchemaField
	CreatedAt   BaseVersionDBSchemaField
	UpdatedAt   BaseVersionDBSchemaField
	DeletedAt   BaseVersionDBSchemaField
	Extra       BaseVersionDBSchemaField
	Creator     BaseVersionDBSchemaField
	Kind        BaseVersionDBSchemaField
	Version     BaseVersionDBSchemaField
	SubVersion  BaseVersionDBSchemaField
	Environment BaseVersionDBSchemaField
	Configure   BaseVersionDBSchemaField
}{

	ID:          BaseVersionDBSchemaField("id"),
	CreatedAt:   BaseVersionDBSchemaField("created_at"),
	UpdatedAt:   BaseVersionDBSchemaField("updated_at"),
	DeletedAt:   BaseVersionDBSchemaField("deleted_at"),
	Extra:       BaseVersionDBSchemaField("extra"),
	Creator:     BaseVersionDBSchemaField("creator"),
	Kind:        BaseVersionDBSchemaField("kind"),
	Version:     BaseVersionDBSchemaField("version"),
	SubVersion:  BaseVersionDBSchemaField("sub_version"),
	Environment: BaseVersionDBSchemaField("environment"),
	Configure:   BaseVersionDBSchemaField("configure"),
}

// Update updates BaseVersion fields by primary key
// nolint: dupl
func (o *BaseVersion) Update(db *gorm.DB, fields ...BaseVersionDBSchemaField) error {
	dbNameToFieldName := map[string]interface{}{
		"id":          o.ID,
		"created_at":  o.CreatedAt,
		"updated_at":  o.UpdatedAt,
		"deleted_at":  o.DeletedAt,
		"extra":       o.Extra,
		"creator":     o.Creator,
		"kind":        o.Kind,
		"version":     o.Version,
		"sub_version": o.SubVersion,
		"environment": o.Environment,
		"configure":   o.Configure,
	}
	u := map[string]interface{}{}
	for _, f := range fields {
		fs := f.String()
		u[fs] = dbNameToFieldName[fs]
	}
	if err := db.Model(o).Updates(u).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return err
		}

		return fmt.Errorf("can't update BaseVersion %v fields %v: %s",
			o, fields, err)
	}

	return nil
}

// BaseVersionUpdater is an BaseVersion updates manager
type BaseVersionUpdater struct {
	fields map[string]interface{}
	db     *gorm.DB
}

// NewBaseVersionUpdater creates new BaseVersion updater
// nolint: dupl
func NewBaseVersionUpdater(db *gorm.DB) BaseVersionUpdater {
	return BaseVersionUpdater{
		fields: map[string]interface{}{},
		db:     db.Model(&BaseVersion{}),
	}
}

// ===== END of BaseVersion modifiers

// ===== BEGIN of query set ClusterConfigureVersionQuerySet

// ClusterConfigureVersionQuerySet is an queryset type for ClusterConfigureVersion
type ClusterConfigureVersionQuerySet struct {
	db *gorm.DB
}

// NewClusterConfigureVersionQuerySet constructs new ClusterConfigureVersionQuerySet
func NewClusterConfigureVersionQuerySet(db *gorm.DB) ClusterConfigureVersionQuerySet {
	return ClusterConfigureVersionQuerySet{
		db: db.Model(&ClusterConfigureVersion{}),
	}
}

func (qs ClusterConfigureVersionQuerySet) w(db *gorm.DB) ClusterConfigureVersionQuerySet {
	return NewClusterConfigureVersionQuerySet(db)
}

// Create is an autogenerated method
// nolint: dupl
func (o *ClusterConfigureVersion) Create(db *gorm.DB) error {
	return db.Create(o).Error
}

// Delete is an autogenerated method
// nolint: dupl
func (o *ClusterConfigureVersion) Delete(db *gorm.DB) error {
	return db.Delete(o).Error
}

// All is an autogenerated method
// nolint: dupl
func (qs ClusterConfigureVersionQuerySet) All(ret *[]ClusterConfigureVersion) error {
	return qs.db.Find(ret).Error
}

// ClusterIDEq is an autogenerated method
// nolint: dupl
func (qs ClusterConfigureVersionQuerySet) ClusterIDEq(clusterID string) ClusterConfigureVersionQuerySet {
	return qs.w(qs.db.Where("cluster_id = ?", clusterID))
}

// ClusterIDIn is an autogenerated method
// nolint: dupl
func (qs ClusterConfigureVersionQuerySet) ClusterIDIn(clusterID ...string) ClusterConfigureVersionQuerySet {
	if len(clusterID) == 0 {
		qs.db.AddError(errors.New("must at least pass one clusterID in ClusterIDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("cluster_id IN (?)", clusterID))
}

// ClusterIDNe is an autogenerated method
// nolint: dupl
func (qs ClusterConfigureVersionQuerySet) ClusterIDNe(clusterID string) ClusterConfigureVersionQuerySet {
	return qs.w(qs.db.Where("cluster_id != ?", clusterID))
}

// ClusterIDNotIn is an autogenerated method
// nolint: dupl
func (qs ClusterConfigureVersionQuerySet) ClusterIDNotIn(clusterID ...string) ClusterConfigureVersionQuerySet {
	if len(clusterID) == 0 {
		qs.db.AddError(errors.New("must at least pass one clusterID in ClusterIDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("cluster_id NOT IN (?)", clusterID))
}

// Count is an autogenerated method
// nolint: dupl
func (qs ClusterConfigureVersionQuerySet) Count() (int, error) {
	var count int
	err := qs.db.Count(&count).Error
	return count, err
}

// CreatedAtEq is an autogenerated method
// nolint: dupl
func (qs ClusterConfigureVersionQuerySet) CreatedAtEq(createdAt time.Time) ClusterConfigureVersionQuerySet {
	return qs.w(qs.db.Where("created_at = ?", createdAt))
}

// CreatedAtGt is an autogenerated method
// nolint: dupl
func (qs ClusterConfigureVersionQuerySet) CreatedAtGt(createdAt time.Time) ClusterConfigureVersionQuerySet {
	return qs.w(qs.db.Where("created_at > ?", createdAt))
}

// CreatedAtGte is an autogenerated method
// nolint: dupl
func (qs ClusterConfigureVersionQuerySet) CreatedAtGte(createdAt time.Time) ClusterConfigureVersionQuerySet {
	return qs.w(qs.db.Where("created_at >= ?", createdAt))
}

// CreatedAtLt is an autogenerated method
// nolint: dupl
func (qs ClusterConfigureVersionQuerySet) CreatedAtLt(createdAt time.Time) ClusterConfigureVersionQuerySet {
	return qs.w(qs.db.Where("created_at < ?", createdAt))
}

// CreatedAtLte is an autogenerated method
// nolint: dupl
func (qs ClusterConfigureVersionQuerySet) CreatedAtLte(createdAt time.Time) ClusterConfigureVersionQuerySet {
	return qs.w(qs.db.Where("created_at <= ?", createdAt))
}

// CreatedAtNe is an autogenerated method
// nolint: dupl
func (qs ClusterConfigureVersionQuerySet) CreatedAtNe(createdAt time.Time) ClusterConfigureVersionQuerySet {
	return qs.w(qs.db.Where("created_at != ?", createdAt))
}

// CreatorEq is an autogenerated method
// nolint: dupl
func (qs ClusterConfigureVersionQuerySet) CreatorEq(creator string) ClusterConfigureVersionQuerySet {
	return qs.w(qs.db.Where("creator = ?", creator))
}

// CreatorIn is an autogenerated method
// nolint: dupl
func (qs ClusterConfigureVersionQuerySet) CreatorIn(creator ...string) ClusterConfigureVersionQuerySet {
	if len(creator) == 0 {
		qs.db.AddError(errors.New("must at least pass one creator in CreatorIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("creator IN (?)", creator))
}

// CreatorNe is an autogenerated method
// nolint: dupl
func (qs ClusterConfigureVersionQuerySet) CreatorNe(creator string) ClusterConfigureVersionQuerySet {
	return qs.w(qs.db.Where("creator != ?", creator))
}

// CreatorNotIn is an autogenerated method
// nolint: dupl
func (qs ClusterConfigureVersionQuerySet) CreatorNotIn(creator ...string) ClusterConfigureVersionQuerySet {
	if len(creator) == 0 {
		qs.db.AddError(errors.New("must at least pass one creator in CreatorNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("creator NOT IN (?)", creator))
}

// Delete is an autogenerated method
// nolint: dupl
func (qs ClusterConfigureVersionQuerySet) Delete() error {
	return qs.db.Delete(ClusterConfigureVersion{}).Error
}

// DeleteNum is an autogenerated method
// nolint: dupl
func (qs ClusterConfigureVersionQuerySet) DeleteNum() (int64, error) {
	db := qs.db.Delete(ClusterConfigureVersion{})
	return db.RowsAffected, db.Error
}

// DeleteNumUnscoped is an autogenerated method
// nolint: dupl
func (qs ClusterConfigureVersionQuerySet) DeleteNumUnscoped() (int64, error) {
	db := qs.db.Unscoped().Delete(ClusterConfigureVersion{})
	return db.RowsAffected, db.Error
}

// DeletedAtEq is an autogenerated method
// nolint: dupl
func (qs ClusterConfigureVersionQuerySet) DeletedAtEq(deletedAt time.Time) ClusterConfigureVersionQuerySet {
	return qs.w(qs.db.Where("deleted_at = ?", deletedAt))
}

// DeletedAtGt is an autogenerated method
// nolint: dupl
func (qs ClusterConfigureVersionQuerySet) DeletedAtGt(deletedAt time.Time) ClusterConfigureVersionQuerySet {
	return qs.w(qs.db.Where("deleted_at > ?", deletedAt))
}

// DeletedAtGte is an autogenerated method
// nolint: dupl
func (qs ClusterConfigureVersionQuerySet) DeletedAtGte(deletedAt time.Time) ClusterConfigureVersionQuerySet {
	return qs.w(qs.db.Where("deleted_at >= ?", deletedAt))
}

// DeletedAtIsNotNull is an autogenerated method
// nolint: dupl
func (qs ClusterConfigureVersionQuerySet) DeletedAtIsNotNull() ClusterConfigureVersionQuerySet {
	return qs.w(qs.db.Where("deleted_at IS NOT NULL"))
}

// DeletedAtIsNull is an autogenerated method
// nolint: dupl
func (qs ClusterConfigureVersionQuerySet) DeletedAtIsNull() ClusterConfigureVersionQuerySet {
	return qs.w(qs.db.Where("deleted_at IS NULL"))
}

// DeletedAtLt is an autogenerated method
// nolint: dupl
func (qs ClusterConfigureVersionQuerySet) DeletedAtLt(deletedAt time.Time) ClusterConfigureVersionQuerySet {
	return qs.w(qs.db.Where("deleted_at < ?", deletedAt))
}

// DeletedAtLte is an autogenerated method
// nolint: dupl
func (qs ClusterConfigureVersionQuerySet) DeletedAtLte(deletedAt time.Time) ClusterConfigureVersionQuerySet {
	return qs.w(qs.db.Where("deleted_at <= ?", deletedAt))
}

// DeletedAtNe is an autogenerated method
// nolint: dupl
func (qs ClusterConfigureVersionQuerySet) DeletedAtNe(deletedAt time.Time) ClusterConfigureVersionQuerySet {
	return qs.w(qs.db.Where("deleted_at != ?", deletedAt))
}

// ExtraEq is an autogenerated method
// nolint: dupl
func (qs ClusterConfigureVersionQuerySet) ExtraEq(extra string) ClusterConfigureVersionQuerySet {
	return qs.w(qs.db.Where("extra = ?", extra))
}

// ExtraIn is an autogenerated method
// nolint: dupl
func (qs ClusterConfigureVersionQuerySet) ExtraIn(extra ...string) ClusterConfigureVersionQuerySet {
	if len(extra) == 0 {
		qs.db.AddError(errors.New("must at least pass one extra in ExtraIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("extra IN (?)", extra))
}

// ExtraNe is an autogenerated method
// nolint: dupl
func (qs ClusterConfigureVersionQuerySet) ExtraNe(extra string) ClusterConfigureVersionQuerySet {
	return qs.w(qs.db.Where("extra != ?", extra))
}

// ExtraNotIn is an autogenerated method
// nolint: dupl
func (qs ClusterConfigureVersionQuerySet) ExtraNotIn(extra ...string) ClusterConfigureVersionQuerySet {
	if len(extra) == 0 {
		qs.db.AddError(errors.New("must at least pass one extra in ExtraNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("extra NOT IN (?)", extra))
}

// GetDB is an autogenerated method
// nolint: dupl
func (qs ClusterConfigureVersionQuerySet) GetDB() *gorm.DB {
	return qs.db
}

// GetUpdater is an autogenerated method
// nolint: dupl
func (qs ClusterConfigureVersionQuerySet) GetUpdater() ClusterConfigureVersionUpdater {
	return NewClusterConfigureVersionUpdater(qs.db)
}

// IDEq is an autogenerated method
// nolint: dupl
func (qs ClusterConfigureVersionQuerySet) IDEq(ID uint) ClusterConfigureVersionQuerySet {
	return qs.w(qs.db.Where("id = ?", ID))
}

// IDGt is an autogenerated method
// nolint: dupl
func (qs ClusterConfigureVersionQuerySet) IDGt(ID uint) ClusterConfigureVersionQuerySet {
	return qs.w(qs.db.Where("id > ?", ID))
}

// IDGte is an autogenerated method
// nolint: dupl
func (qs ClusterConfigureVersionQuerySet) IDGte(ID uint) ClusterConfigureVersionQuerySet {
	return qs.w(qs.db.Where("id >= ?", ID))
}

// IDIn is an autogenerated method
// nolint: dupl
func (qs ClusterConfigureVersionQuerySet) IDIn(ID ...uint) ClusterConfigureVersionQuerySet {
	if len(ID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ID in IDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("id IN (?)", ID))
}

// IDLt is an autogenerated method
// nolint: dupl
func (qs ClusterConfigureVersionQuerySet) IDLt(ID uint) ClusterConfigureVersionQuerySet {
	return qs.w(qs.db.Where("id < ?", ID))
}

// IDLte is an autogenerated method
// nolint: dupl
func (qs ClusterConfigureVersionQuerySet) IDLte(ID uint) ClusterConfigureVersionQuerySet {
	return qs.w(qs.db.Where("id <= ?", ID))
}

// IDNe is an autogenerated method
// nolint: dupl
func (qs ClusterConfigureVersionQuerySet) IDNe(ID uint) ClusterConfigureVersionQuerySet {
	return qs.w(qs.db.Where("id != ?", ID))
}

// IDNotIn is an autogenerated method
// nolint: dupl
func (qs ClusterConfigureVersionQuerySet) IDNotIn(ID ...uint) ClusterConfigureVersionQuerySet {
	if len(ID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ID in IDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("id NOT IN (?)", ID))
}

// Limit is an autogenerated method
// nolint: dupl
func (qs ClusterConfigureVersionQuerySet) Limit(limit int) ClusterConfigureVersionQuerySet {
	return qs.w(qs.db.Limit(limit))
}

// Offset is an autogenerated method
// nolint: dupl
func (qs ClusterConfigureVersionQuerySet) Offset(offset int) ClusterConfigureVersionQuerySet {
	return qs.w(qs.db.Offset(offset))
}

// One is used to retrieve one result. It returns gorm.ErrRecordNotFound
// if nothing was fetched
func (qs ClusterConfigureVersionQuerySet) One(ret *ClusterConfigureVersion) error {
	return qs.db.First(ret).Error
}

// OrderAscByCreatedAt is an autogenerated method
// nolint: dupl
func (qs ClusterConfigureVersionQuerySet) OrderAscByCreatedAt() ClusterConfigureVersionQuerySet {
	return qs.w(qs.db.Order("created_at ASC"))
}

// OrderAscByDeletedAt is an autogenerated method
// nolint: dupl
func (qs ClusterConfigureVersionQuerySet) OrderAscByDeletedAt() ClusterConfigureVersionQuerySet {
	return qs.w(qs.db.Order("deleted_at ASC"))
}

// OrderAscByID is an autogenerated method
// nolint: dupl
func (qs ClusterConfigureVersionQuerySet) OrderAscByID() ClusterConfigureVersionQuerySet {
	return qs.w(qs.db.Order("id ASC"))
}

// OrderAscByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs ClusterConfigureVersionQuerySet) OrderAscByUpdatedAt() ClusterConfigureVersionQuerySet {
	return qs.w(qs.db.Order("updated_at ASC"))
}

// OrderDescByCreatedAt is an autogenerated method
// nolint: dupl
func (qs ClusterConfigureVersionQuerySet) OrderDescByCreatedAt() ClusterConfigureVersionQuerySet {
	return qs.w(qs.db.Order("created_at DESC"))
}

// OrderDescByDeletedAt is an autogenerated method
// nolint: dupl
func (qs ClusterConfigureVersionQuerySet) OrderDescByDeletedAt() ClusterConfigureVersionQuerySet {
	return qs.w(qs.db.Order("deleted_at DESC"))
}

// OrderDescByID is an autogenerated method
// nolint: dupl
func (qs ClusterConfigureVersionQuerySet) OrderDescByID() ClusterConfigureVersionQuerySet {
	return qs.w(qs.db.Order("id DESC"))
}

// OrderDescByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs ClusterConfigureVersionQuerySet) OrderDescByUpdatedAt() ClusterConfigureVersionQuerySet {
	return qs.w(qs.db.Order("updated_at DESC"))
}

// SnapshotEq is an autogenerated method
// nolint: dupl
func (qs ClusterConfigureVersionQuerySet) SnapshotEq(snapshot string) ClusterConfigureVersionQuerySet {
	return qs.w(qs.db.Where("snapshot = ?", snapshot))
}

// SnapshotIn is an autogenerated method
// nolint: dupl
func (qs ClusterConfigureVersionQuerySet) SnapshotIn(snapshot ...string) ClusterConfigureVersionQuerySet {
	if len(snapshot) == 0 {
		qs.db.AddError(errors.New("must at least pass one snapshot in SnapshotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("snapshot IN (?)", snapshot))
}

// SnapshotNe is an autogenerated method
// nolint: dupl
func (qs ClusterConfigureVersionQuerySet) SnapshotNe(snapshot string) ClusterConfigureVersionQuerySet {
	return qs.w(qs.db.Where("snapshot != ?", snapshot))
}

// SnapshotNotIn is an autogenerated method
// nolint: dupl
func (qs ClusterConfigureVersionQuerySet) SnapshotNotIn(snapshot ...string) ClusterConfigureVersionQuerySet {
	if len(snapshot) == 0 {
		qs.db.AddError(errors.New("must at least pass one snapshot in SnapshotNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("snapshot NOT IN (?)", snapshot))
}

// UpdatedAtEq is an autogenerated method
// nolint: dupl
func (qs ClusterConfigureVersionQuerySet) UpdatedAtEq(updatedAt time.Time) ClusterConfigureVersionQuerySet {
	return qs.w(qs.db.Where("updated_at = ?", updatedAt))
}

// UpdatedAtGt is an autogenerated method
// nolint: dupl
func (qs ClusterConfigureVersionQuerySet) UpdatedAtGt(updatedAt time.Time) ClusterConfigureVersionQuerySet {
	return qs.w(qs.db.Where("updated_at > ?", updatedAt))
}

// UpdatedAtGte is an autogenerated method
// nolint: dupl
func (qs ClusterConfigureVersionQuerySet) UpdatedAtGte(updatedAt time.Time) ClusterConfigureVersionQuerySet {
	return qs.w(qs.db.Where("updated_at >= ?", updatedAt))
}

// UpdatedAtLt is an autogenerated method
// nolint: dupl
func (qs ClusterConfigureVersionQuerySet) UpdatedAtLt(updatedAt time.Time) ClusterConfigureVersionQuerySet {
	return qs.w(qs.db.Where("updated_at < ?", updatedAt))
}

// UpdatedAtLte is an autogenerated method
// nolint: dupl
func (qs ClusterConfigureVersionQuerySet) UpdatedAtLte(updatedAt time.Time) ClusterConfigureVersionQuerySet {
	return qs.w(qs.db.Where("updated_at <= ?", updatedAt))
}

// UpdatedAtNe is an autogenerated method
// nolint: dupl
func (qs ClusterConfigureVersionQuerySet) UpdatedAtNe(updatedAt time.Time) ClusterConfigureVersionQuerySet {
	return qs.w(qs.db.Where("updated_at != ?", updatedAt))
}

// SetClusterID is an autogenerated method
// nolint: dupl
func (u ClusterConfigureVersionUpdater) SetClusterID(clusterID string) ClusterConfigureVersionUpdater {
	u.fields[string(ClusterConfigureVersionDBSchema.ClusterID)] = clusterID
	return u
}

// SetCreatedAt is an autogenerated method
// nolint: dupl
func (u ClusterConfigureVersionUpdater) SetCreatedAt(createdAt time.Time) ClusterConfigureVersionUpdater {
	u.fields[string(ClusterConfigureVersionDBSchema.CreatedAt)] = createdAt
	return u
}

// SetCreator is an autogenerated method
// nolint: dupl
func (u ClusterConfigureVersionUpdater) SetCreator(creator string) ClusterConfigureVersionUpdater {
	u.fields[string(ClusterConfigureVersionDBSchema.Creator)] = creator
	return u
}

// SetDeletedAt is an autogenerated method
// nolint: dupl
func (u ClusterConfigureVersionUpdater) SetDeletedAt(deletedAt *time.Time) ClusterConfigureVersionUpdater {
	u.fields[string(ClusterConfigureVersionDBSchema.DeletedAt)] = deletedAt
	return u
}

// SetExtra is an autogenerated method
// nolint: dupl
func (u ClusterConfigureVersionUpdater) SetExtra(extra string) ClusterConfigureVersionUpdater {
	u.fields[string(ClusterConfigureVersionDBSchema.Extra)] = extra
	return u
}

// SetID is an autogenerated method
// nolint: dupl
func (u ClusterConfigureVersionUpdater) SetID(ID uint) ClusterConfigureVersionUpdater {
	u.fields[string(ClusterConfigureVersionDBSchema.ID)] = ID
	return u
}

// SetSnapshot is an autogenerated method
// nolint: dupl
func (u ClusterConfigureVersionUpdater) SetSnapshot(snapshot string) ClusterConfigureVersionUpdater {
	u.fields[string(ClusterConfigureVersionDBSchema.Snapshot)] = snapshot
	return u
}

// SetUpdatedAt is an autogenerated method
// nolint: dupl
func (u ClusterConfigureVersionUpdater) SetUpdatedAt(updatedAt time.Time) ClusterConfigureVersionUpdater {
	u.fields[string(ClusterConfigureVersionDBSchema.UpdatedAt)] = updatedAt
	return u
}

// Update is an autogenerated method
// nolint: dupl
func (u ClusterConfigureVersionUpdater) Update() error {
	return u.db.Updates(u.fields).Error
}

// UpdateNum is an autogenerated method
// nolint: dupl
func (u ClusterConfigureVersionUpdater) UpdateNum() (int64, error) {
	db := u.db.Updates(u.fields)
	return db.RowsAffected, db.Error
}

// ===== END of query set ClusterConfigureVersionQuerySet

// ===== BEGIN of ClusterConfigureVersion modifiers

// ClusterConfigureVersionDBSchemaField describes database schema field. It requires for method 'Update'
type ClusterConfigureVersionDBSchemaField string

// String method returns string representation of field.
// nolint: dupl
func (f ClusterConfigureVersionDBSchemaField) String() string {
	return string(f)
}

// ClusterConfigureVersionDBSchema stores db field names of ClusterConfigureVersion
var ClusterConfigureVersionDBSchema = struct {
	ID        ClusterConfigureVersionDBSchemaField
	CreatedAt ClusterConfigureVersionDBSchemaField
	UpdatedAt ClusterConfigureVersionDBSchemaField
	DeletedAt ClusterConfigureVersionDBSchemaField
	Extra     ClusterConfigureVersionDBSchemaField
	Creator   ClusterConfigureVersionDBSchemaField
	ClusterID ClusterConfigureVersionDBSchemaField
	Snapshot  ClusterConfigureVersionDBSchemaField
}{

	ID:        ClusterConfigureVersionDBSchemaField("id"),
	CreatedAt: ClusterConfigureVersionDBSchemaField("created_at"),
	UpdatedAt: ClusterConfigureVersionDBSchemaField("updated_at"),
	DeletedAt: ClusterConfigureVersionDBSchemaField("deleted_at"),
	Extra:     ClusterConfigureVersionDBSchemaField("extra"),
	Creator:   ClusterConfigureVersionDBSchemaField("creator"),
	ClusterID: ClusterConfigureVersionDBSchemaField("cluster_id"),
	Snapshot:  ClusterConfigureVersionDBSchemaField("snapshot"),
}

// Update updates ClusterConfigureVersion fields by primary key
// nolint: dupl
func (o *ClusterConfigureVersion) Update(db *gorm.DB, fields ...ClusterConfigureVersionDBSchemaField) error {
	dbNameToFieldName := map[string]interface{}{
		"id":         o.ID,
		"created_at": o.CreatedAt,
		"updated_at": o.UpdatedAt,
		"deleted_at": o.DeletedAt,
		"extra":      o.Extra,
		"creator":    o.Creator,
		"cluster_id": o.ClusterID,
		"snapshot":   o.Snapshot,
	}
	u := map[string]interface{}{}
	for _, f := range fields {
		fs := f.String()
		u[fs] = dbNameToFieldName[fs]
	}
	if err := db.Model(o).Updates(u).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return err
		}

		return fmt.Errorf("can't update ClusterConfigureVersion %v fields %v: %s",
			o, fields, err)
	}

	return nil
}

// ClusterConfigureVersionUpdater is an ClusterConfigureVersion updates manager
type ClusterConfigureVersionUpdater struct {
	fields map[string]interface{}
	db     *gorm.DB
}

// NewClusterConfigureVersionUpdater creates new ClusterConfigureVersion updater
// nolint: dupl
func NewClusterConfigureVersionUpdater(db *gorm.DB) ClusterConfigureVersionUpdater {
	return ClusterConfigureVersionUpdater{
		fields: map[string]interface{}{},
		db:     db.Model(&ClusterConfigureVersion{}),
	}
}

// ===== END of ClusterConfigureVersion modifiers

// ===== END of all query sets
