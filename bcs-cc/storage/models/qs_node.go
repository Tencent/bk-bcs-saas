// Code generated by go-queryset. DO NOT EDIT.
package models

import (
	"errors"
	"fmt"
	"time"

	"github.com/jinzhu/gorm"
)

// ===== BEGIN of all query sets

// ===== BEGIN of query set NodeQuerySet

// NodeQuerySet is an queryset type for Node
type NodeQuerySet struct {
	db *gorm.DB
}

// NewNodeQuerySet constructs new NodeQuerySet
func NewNodeQuerySet(db *gorm.DB) NodeQuerySet {
	return NodeQuerySet{
		db: db.Model(&Node{}),
	}
}

func (qs NodeQuerySet) w(db *gorm.DB) NodeQuerySet {
	return NewNodeQuerySet(db)
}

// Create is an autogenerated method
// nolint: dupl
func (o *Node) Create(db *gorm.DB) error {
	return db.Create(o).Error
}

// Delete is an autogenerated method
// nolint: dupl
func (o *Node) Delete(db *gorm.DB) error {
	return db.Delete(o).Error
}

// All is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) All(ret *[]Node) error {
	return qs.db.Find(ret).Error
}

// CPUEq is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) CPUEq(CPU float64) NodeQuerySet {
	return qs.w(qs.db.Where("cpu = ?", CPU))
}

// CPUGt is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) CPUGt(CPU float64) NodeQuerySet {
	return qs.w(qs.db.Where("cpu > ?", CPU))
}

// CPUGte is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) CPUGte(CPU float64) NodeQuerySet {
	return qs.w(qs.db.Where("cpu >= ?", CPU))
}

// CPUIn is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) CPUIn(CPU ...float64) NodeQuerySet {
	if len(CPU) == 0 {
		qs.db.AddError(errors.New("must at least pass one CPU in CPUIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("cpu IN (?)", CPU))
}

// CPULt is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) CPULt(CPU float64) NodeQuerySet {
	return qs.w(qs.db.Where("cpu < ?", CPU))
}

// CPULte is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) CPULte(CPU float64) NodeQuerySet {
	return qs.w(qs.db.Where("cpu <= ?", CPU))
}

// CPUNe is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) CPUNe(CPU float64) NodeQuerySet {
	return qs.w(qs.db.Where("cpu != ?", CPU))
}

// CPUNotIn is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) CPUNotIn(CPU ...float64) NodeQuerySet {
	if len(CPU) == 0 {
		qs.db.AddError(errors.New("must at least pass one CPU in CPUNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("cpu NOT IN (?)", CPU))
}

// ClusterIDEq is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) ClusterIDEq(clusterID string) NodeQuerySet {
	return qs.w(qs.db.Where("cluster_id = ?", clusterID))
}

// ClusterIDIn is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) ClusterIDIn(clusterID ...string) NodeQuerySet {
	if len(clusterID) == 0 {
		qs.db.AddError(errors.New("must at least pass one clusterID in ClusterIDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("cluster_id IN (?)", clusterID))
}

// ClusterIDNe is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) ClusterIDNe(clusterID string) NodeQuerySet {
	return qs.w(qs.db.Where("cluster_id != ?", clusterID))
}

// ClusterIDNotIn is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) ClusterIDNotIn(clusterID ...string) NodeQuerySet {
	if len(clusterID) == 0 {
		qs.db.AddError(errors.New("must at least pass one clusterID in ClusterIDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("cluster_id NOT IN (?)", clusterID))
}

// Count is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) Count() (int, error) {
	var count int
	err := qs.db.Count(&count).Error
	return count, err
}

// CreatedAtEq is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) CreatedAtEq(createdAt time.Time) NodeQuerySet {
	return qs.w(qs.db.Where("created_at = ?", createdAt))
}

// CreatedAtGt is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) CreatedAtGt(createdAt time.Time) NodeQuerySet {
	return qs.w(qs.db.Where("created_at > ?", createdAt))
}

// CreatedAtGte is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) CreatedAtGte(createdAt time.Time) NodeQuerySet {
	return qs.w(qs.db.Where("created_at >= ?", createdAt))
}

// CreatedAtLt is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) CreatedAtLt(createdAt time.Time) NodeQuerySet {
	return qs.w(qs.db.Where("created_at < ?", createdAt))
}

// CreatedAtLte is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) CreatedAtLte(createdAt time.Time) NodeQuerySet {
	return qs.w(qs.db.Where("created_at <= ?", createdAt))
}

// CreatedAtNe is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) CreatedAtNe(createdAt time.Time) NodeQuerySet {
	return qs.w(qs.db.Where("created_at != ?", createdAt))
}

// CreatorEq is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) CreatorEq(creator string) NodeQuerySet {
	return qs.w(qs.db.Where("creator = ?", creator))
}

// CreatorIn is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) CreatorIn(creator ...string) NodeQuerySet {
	if len(creator) == 0 {
		qs.db.AddError(errors.New("must at least pass one creator in CreatorIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("creator IN (?)", creator))
}

// CreatorNe is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) CreatorNe(creator string) NodeQuerySet {
	return qs.w(qs.db.Where("creator != ?", creator))
}

// CreatorNotIn is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) CreatorNotIn(creator ...string) NodeQuerySet {
	if len(creator) == 0 {
		qs.db.AddError(errors.New("must at least pass one creator in CreatorNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("creator NOT IN (?)", creator))
}

// Delete is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) Delete() error {
	return qs.db.Delete(Node{}).Error
}

// DeleteNum is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) DeleteNum() (int64, error) {
	db := qs.db.Delete(Node{})
	return db.RowsAffected, db.Error
}

// DeleteNumUnscoped is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) DeleteNumUnscoped() (int64, error) {
	db := qs.db.Unscoped().Delete(Node{})
	return db.RowsAffected, db.Error
}

// DeletedAtEq is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) DeletedAtEq(deletedAt time.Time) NodeQuerySet {
	return qs.w(qs.db.Where("deleted_at = ?", deletedAt))
}

// DeletedAtGt is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) DeletedAtGt(deletedAt time.Time) NodeQuerySet {
	return qs.w(qs.db.Where("deleted_at > ?", deletedAt))
}

// DeletedAtGte is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) DeletedAtGte(deletedAt time.Time) NodeQuerySet {
	return qs.w(qs.db.Where("deleted_at >= ?", deletedAt))
}

// DeletedAtIsNotNull is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) DeletedAtIsNotNull() NodeQuerySet {
	return qs.w(qs.db.Where("deleted_at IS NOT NULL"))
}

// DeletedAtIsNull is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) DeletedAtIsNull() NodeQuerySet {
	return qs.w(qs.db.Where("deleted_at IS NULL"))
}

// DeletedAtLt is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) DeletedAtLt(deletedAt time.Time) NodeQuerySet {
	return qs.w(qs.db.Where("deleted_at < ?", deletedAt))
}

// DeletedAtLte is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) DeletedAtLte(deletedAt time.Time) NodeQuerySet {
	return qs.w(qs.db.Where("deleted_at <= ?", deletedAt))
}

// DeletedAtNe is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) DeletedAtNe(deletedAt time.Time) NodeQuerySet {
	return qs.w(qs.db.Where("deleted_at != ?", deletedAt))
}

// DescriptionEq is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) DescriptionEq(description string) NodeQuerySet {
	return qs.w(qs.db.Where("description = ?", description))
}

// DescriptionIn is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) DescriptionIn(description ...string) NodeQuerySet {
	if len(description) == 0 {
		qs.db.AddError(errors.New("must at least pass one description in DescriptionIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("description IN (?)", description))
}

// DescriptionNe is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) DescriptionNe(description string) NodeQuerySet {
	return qs.w(qs.db.Where("description != ?", description))
}

// DescriptionNotIn is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) DescriptionNotIn(description ...string) NodeQuerySet {
	if len(description) == 0 {
		qs.db.AddError(errors.New("must at least pass one description in DescriptionNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("description NOT IN (?)", description))
}

// DeviceClassEq is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) DeviceClassEq(deviceClass string) NodeQuerySet {
	return qs.w(qs.db.Where("device_class = ?", deviceClass))
}

// DeviceClassIn is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) DeviceClassIn(deviceClass ...string) NodeQuerySet {
	if len(deviceClass) == 0 {
		qs.db.AddError(errors.New("must at least pass one deviceClass in DeviceClassIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("device_class IN (?)", deviceClass))
}

// DeviceClassNe is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) DeviceClassNe(deviceClass string) NodeQuerySet {
	return qs.w(qs.db.Where("device_class != ?", deviceClass))
}

// DeviceClassNotIn is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) DeviceClassNotIn(deviceClass ...string) NodeQuerySet {
	if len(deviceClass) == 0 {
		qs.db.AddError(errors.New("must at least pass one deviceClass in DeviceClassNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("device_class NOT IN (?)", deviceClass))
}

// DiskEq is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) DiskEq(disk float64) NodeQuerySet {
	return qs.w(qs.db.Where("disk = ?", disk))
}

// DiskGt is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) DiskGt(disk float64) NodeQuerySet {
	return qs.w(qs.db.Where("disk > ?", disk))
}

// DiskGte is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) DiskGte(disk float64) NodeQuerySet {
	return qs.w(qs.db.Where("disk >= ?", disk))
}

// DiskIn is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) DiskIn(disk ...float64) NodeQuerySet {
	if len(disk) == 0 {
		qs.db.AddError(errors.New("must at least pass one disk in DiskIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("disk IN (?)", disk))
}

// DiskLt is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) DiskLt(disk float64) NodeQuerySet {
	return qs.w(qs.db.Where("disk < ?", disk))
}

// DiskLte is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) DiskLte(disk float64) NodeQuerySet {
	return qs.w(qs.db.Where("disk <= ?", disk))
}

// DiskNe is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) DiskNe(disk float64) NodeQuerySet {
	return qs.w(qs.db.Where("disk != ?", disk))
}

// DiskNotIn is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) DiskNotIn(disk ...float64) NodeQuerySet {
	if len(disk) == 0 {
		qs.db.AddError(errors.New("must at least pass one disk in DiskNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("disk NOT IN (?)", disk))
}

// ExtraEq is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) ExtraEq(extra string) NodeQuerySet {
	return qs.w(qs.db.Where("extra = ?", extra))
}

// ExtraIn is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) ExtraIn(extra ...string) NodeQuerySet {
	if len(extra) == 0 {
		qs.db.AddError(errors.New("must at least pass one extra in ExtraIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("extra IN (?)", extra))
}

// ExtraNe is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) ExtraNe(extra string) NodeQuerySet {
	return qs.w(qs.db.Where("extra != ?", extra))
}

// ExtraNotIn is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) ExtraNotIn(extra ...string) NodeQuerySet {
	if len(extra) == 0 {
		qs.db.AddError(errors.New("must at least pass one extra in ExtraNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("extra NOT IN (?)", extra))
}

// GetDB is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) GetDB() *gorm.DB {
	return qs.db
}

// GetUpdater is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) GetUpdater() NodeUpdater {
	return NewNodeUpdater(qs.db)
}

// IDEq is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) IDEq(ID uint) NodeQuerySet {
	return qs.w(qs.db.Where("id = ?", ID))
}

// IDGt is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) IDGt(ID uint) NodeQuerySet {
	return qs.w(qs.db.Where("id > ?", ID))
}

// IDGte is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) IDGte(ID uint) NodeQuerySet {
	return qs.w(qs.db.Where("id >= ?", ID))
}

// IDIn is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) IDIn(ID ...uint) NodeQuerySet {
	if len(ID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ID in IDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("id IN (?)", ID))
}

// IDLt is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) IDLt(ID uint) NodeQuerySet {
	return qs.w(qs.db.Where("id < ?", ID))
}

// IDLte is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) IDLte(ID uint) NodeQuerySet {
	return qs.w(qs.db.Where("id <= ?", ID))
}

// IDNe is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) IDNe(ID uint) NodeQuerySet {
	return qs.w(qs.db.Where("id != ?", ID))
}

// IDNotIn is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) IDNotIn(ID ...uint) NodeQuerySet {
	if len(ID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ID in IDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("id NOT IN (?)", ID))
}

// IPResourcesEq is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) IPResourcesEq(iPResources float64) NodeQuerySet {
	return qs.w(qs.db.Where("ip_resources = ?", iPResources))
}

// IPResourcesGt is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) IPResourcesGt(iPResources float64) NodeQuerySet {
	return qs.w(qs.db.Where("ip_resources > ?", iPResources))
}

// IPResourcesGte is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) IPResourcesGte(iPResources float64) NodeQuerySet {
	return qs.w(qs.db.Where("ip_resources >= ?", iPResources))
}

// IPResourcesIn is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) IPResourcesIn(iPResources ...float64) NodeQuerySet {
	if len(iPResources) == 0 {
		qs.db.AddError(errors.New("must at least pass one iPResources in IPResourcesIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("ip_resources IN (?)", iPResources))
}

// IPResourcesLt is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) IPResourcesLt(iPResources float64) NodeQuerySet {
	return qs.w(qs.db.Where("ip_resources < ?", iPResources))
}

// IPResourcesLte is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) IPResourcesLte(iPResources float64) NodeQuerySet {
	return qs.w(qs.db.Where("ip_resources <= ?", iPResources))
}

// IPResourcesNe is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) IPResourcesNe(iPResources float64) NodeQuerySet {
	return qs.w(qs.db.Where("ip_resources != ?", iPResources))
}

// IPResourcesNotIn is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) IPResourcesNotIn(iPResources ...float64) NodeQuerySet {
	if len(iPResources) == 0 {
		qs.db.AddError(errors.New("must at least pass one iPResources in IPResourcesNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("ip_resources NOT IN (?)", iPResources))
}

// InnerIPEq is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) InnerIPEq(innerIP string) NodeQuerySet {
	return qs.w(qs.db.Where("inner_ip = ?", innerIP))
}

// InnerIPIn is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) InnerIPIn(innerIP ...string) NodeQuerySet {
	if len(innerIP) == 0 {
		qs.db.AddError(errors.New("must at least pass one innerIP in InnerIPIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("inner_ip IN (?)", innerIP))
}

// InnerIPNe is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) InnerIPNe(innerIP string) NodeQuerySet {
	return qs.w(qs.db.Where("inner_ip != ?", innerIP))
}

// InnerIPNotIn is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) InnerIPNotIn(innerIP ...string) NodeQuerySet {
	if len(innerIP) == 0 {
		qs.db.AddError(errors.New("must at least pass one innerIP in InnerIPNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("inner_ip NOT IN (?)", innerIP))
}

// KindEq is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) KindEq(kind string) NodeQuerySet {
	return qs.w(qs.db.Where("kind = ?", kind))
}

// KindIn is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) KindIn(kind ...string) NodeQuerySet {
	if len(kind) == 0 {
		qs.db.AddError(errors.New("must at least pass one kind in KindIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("kind IN (?)", kind))
}

// KindNe is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) KindNe(kind string) NodeQuerySet {
	return qs.w(qs.db.Where("kind != ?", kind))
}

// KindNotIn is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) KindNotIn(kind ...string) NodeQuerySet {
	if len(kind) == 0 {
		qs.db.AddError(errors.New("must at least pass one kind in KindNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("kind NOT IN (?)", kind))
}

// Limit is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) Limit(limit int) NodeQuerySet {
	return qs.w(qs.db.Limit(limit))
}

// MEMEq is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) MEMEq(mEM float64) NodeQuerySet {
	return qs.w(qs.db.Where("mem = ?", mEM))
}

// MEMGt is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) MEMGt(mEM float64) NodeQuerySet {
	return qs.w(qs.db.Where("mem > ?", mEM))
}

// MEMGte is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) MEMGte(mEM float64) NodeQuerySet {
	return qs.w(qs.db.Where("mem >= ?", mEM))
}

// MEMIn is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) MEMIn(mEM ...float64) NodeQuerySet {
	if len(mEM) == 0 {
		qs.db.AddError(errors.New("must at least pass one mEM in MEMIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("mem IN (?)", mEM))
}

// MEMLt is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) MEMLt(mEM float64) NodeQuerySet {
	return qs.w(qs.db.Where("mem < ?", mEM))
}

// MEMLte is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) MEMLte(mEM float64) NodeQuerySet {
	return qs.w(qs.db.Where("mem <= ?", mEM))
}

// MEMNe is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) MEMNe(mEM float64) NodeQuerySet {
	return qs.w(qs.db.Where("mem != ?", mEM))
}

// MEMNotIn is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) MEMNotIn(mEM ...float64) NodeQuerySet {
	if len(mEM) == 0 {
		qs.db.AddError(errors.New("must at least pass one mEM in MEMNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("mem NOT IN (?)", mEM))
}

// NameEq is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) NameEq(name string) NodeQuerySet {
	return qs.w(qs.db.Where("name = ?", name))
}

// NameIn is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) NameIn(name ...string) NodeQuerySet {
	if len(name) == 0 {
		qs.db.AddError(errors.New("must at least pass one name in NameIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("name IN (?)", name))
}

// NameNe is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) NameNe(name string) NodeQuerySet {
	return qs.w(qs.db.Where("name != ?", name))
}

// NameNotIn is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) NameNotIn(name ...string) NodeQuerySet {
	if len(name) == 0 {
		qs.db.AddError(errors.New("must at least pass one name in NameNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("name NOT IN (?)", name))
}

// Offset is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) Offset(offset int) NodeQuerySet {
	return qs.w(qs.db.Offset(offset))
}

// One is used to retrieve one result. It returns gorm.ErrRecordNotFound
// if nothing was fetched
func (qs NodeQuerySet) One(ret *Node) error {
	return qs.db.First(ret).Error
}

// OrderAscByCPU is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) OrderAscByCPU() NodeQuerySet {
	return qs.w(qs.db.Order("cpu ASC"))
}

// OrderAscByCreatedAt is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) OrderAscByCreatedAt() NodeQuerySet {
	return qs.w(qs.db.Order("created_at ASC"))
}

// OrderAscByDeletedAt is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) OrderAscByDeletedAt() NodeQuerySet {
	return qs.w(qs.db.Order("deleted_at ASC"))
}

// OrderAscByDisk is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) OrderAscByDisk() NodeQuerySet {
	return qs.w(qs.db.Order("disk ASC"))
}

// OrderAscByID is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) OrderAscByID() NodeQuerySet {
	return qs.w(qs.db.Order("id ASC"))
}

// OrderAscByIPResources is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) OrderAscByIPResources() NodeQuerySet {
	return qs.w(qs.db.Order("ip_resources ASC"))
}

// OrderAscByMEM is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) OrderAscByMEM() NodeQuerySet {
	return qs.w(qs.db.Order("mem ASC"))
}

// OrderAscByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) OrderAscByUpdatedAt() NodeQuerySet {
	return qs.w(qs.db.Order("updated_at ASC"))
}

// OrderDescByCPU is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) OrderDescByCPU() NodeQuerySet {
	return qs.w(qs.db.Order("cpu DESC"))
}

// OrderDescByCreatedAt is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) OrderDescByCreatedAt() NodeQuerySet {
	return qs.w(qs.db.Order("created_at DESC"))
}

// OrderDescByDeletedAt is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) OrderDescByDeletedAt() NodeQuerySet {
	return qs.w(qs.db.Order("deleted_at DESC"))
}

// OrderDescByDisk is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) OrderDescByDisk() NodeQuerySet {
	return qs.w(qs.db.Order("disk DESC"))
}

// OrderDescByID is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) OrderDescByID() NodeQuerySet {
	return qs.w(qs.db.Order("id DESC"))
}

// OrderDescByIPResources is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) OrderDescByIPResources() NodeQuerySet {
	return qs.w(qs.db.Order("ip_resources DESC"))
}

// OrderDescByMEM is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) OrderDescByMEM() NodeQuerySet {
	return qs.w(qs.db.Order("mem DESC"))
}

// OrderDescByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) OrderDescByUpdatedAt() NodeQuerySet {
	return qs.w(qs.db.Order("updated_at DESC"))
}

// OutterIPEq is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) OutterIPEq(outterIP string) NodeQuerySet {
	return qs.w(qs.db.Where("outter_ip = ?", outterIP))
}

// OutterIPIn is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) OutterIPIn(outterIP ...string) NodeQuerySet {
	if len(outterIP) == 0 {
		qs.db.AddError(errors.New("must at least pass one outterIP in OutterIPIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("outter_ip IN (?)", outterIP))
}

// OutterIPNe is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) OutterIPNe(outterIP string) NodeQuerySet {
	return qs.w(qs.db.Where("outter_ip != ?", outterIP))
}

// OutterIPNotIn is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) OutterIPNotIn(outterIP ...string) NodeQuerySet {
	if len(outterIP) == 0 {
		qs.db.AddError(errors.New("must at least pass one outterIP in OutterIPNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("outter_ip NOT IN (?)", outterIP))
}

// ProjectIDEq is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) ProjectIDEq(projectID string) NodeQuerySet {
	return qs.w(qs.db.Where("project_id = ?", projectID))
}

// ProjectIDIn is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) ProjectIDIn(projectID ...string) NodeQuerySet {
	if len(projectID) == 0 {
		qs.db.AddError(errors.New("must at least pass one projectID in ProjectIDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("project_id IN (?)", projectID))
}

// ProjectIDNe is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) ProjectIDNe(projectID string) NodeQuerySet {
	return qs.w(qs.db.Where("project_id != ?", projectID))
}

// ProjectIDNotIn is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) ProjectIDNotIn(projectID ...string) NodeQuerySet {
	if len(projectID) == 0 {
		qs.db.AddError(errors.New("must at least pass one projectID in ProjectIDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("project_id NOT IN (?)", projectID))
}

// StatusEq is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) StatusEq(status string) NodeQuerySet {
	return qs.w(qs.db.Where("status = ?", status))
}

// StatusIn is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) StatusIn(status ...string) NodeQuerySet {
	if len(status) == 0 {
		qs.db.AddError(errors.New("must at least pass one status in StatusIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("status IN (?)", status))
}

// StatusNe is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) StatusNe(status string) NodeQuerySet {
	return qs.w(qs.db.Where("status != ?", status))
}

// StatusNotIn is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) StatusNotIn(status ...string) NodeQuerySet {
	if len(status) == 0 {
		qs.db.AddError(errors.New("must at least pass one status in StatusNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("status NOT IN (?)", status))
}

// UpdatedAtEq is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) UpdatedAtEq(updatedAt time.Time) NodeQuerySet {
	return qs.w(qs.db.Where("updated_at = ?", updatedAt))
}

// UpdatedAtGt is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) UpdatedAtGt(updatedAt time.Time) NodeQuerySet {
	return qs.w(qs.db.Where("updated_at > ?", updatedAt))
}

// UpdatedAtGte is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) UpdatedAtGte(updatedAt time.Time) NodeQuerySet {
	return qs.w(qs.db.Where("updated_at >= ?", updatedAt))
}

// UpdatedAtLt is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) UpdatedAtLt(updatedAt time.Time) NodeQuerySet {
	return qs.w(qs.db.Where("updated_at < ?", updatedAt))
}

// UpdatedAtLte is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) UpdatedAtLte(updatedAt time.Time) NodeQuerySet {
	return qs.w(qs.db.Where("updated_at <= ?", updatedAt))
}

// UpdatedAtNe is an autogenerated method
// nolint: dupl
func (qs NodeQuerySet) UpdatedAtNe(updatedAt time.Time) NodeQuerySet {
	return qs.w(qs.db.Where("updated_at != ?", updatedAt))
}

// SetCPU is an autogenerated method
// nolint: dupl
func (u NodeUpdater) SetCPU(CPU float64) NodeUpdater {
	u.fields[string(NodeDBSchema.CPU)] = CPU
	return u
}

// SetClusterID is an autogenerated method
// nolint: dupl
func (u NodeUpdater) SetClusterID(clusterID string) NodeUpdater {
	u.fields[string(NodeDBSchema.ClusterID)] = clusterID
	return u
}

// SetCreatedAt is an autogenerated method
// nolint: dupl
func (u NodeUpdater) SetCreatedAt(createdAt time.Time) NodeUpdater {
	u.fields[string(NodeDBSchema.CreatedAt)] = createdAt
	return u
}

// SetCreator is an autogenerated method
// nolint: dupl
func (u NodeUpdater) SetCreator(creator string) NodeUpdater {
	u.fields[string(NodeDBSchema.Creator)] = creator
	return u
}

// SetDeletedAt is an autogenerated method
// nolint: dupl
func (u NodeUpdater) SetDeletedAt(deletedAt *time.Time) NodeUpdater {
	u.fields[string(NodeDBSchema.DeletedAt)] = deletedAt
	return u
}

// SetDescription is an autogenerated method
// nolint: dupl
func (u NodeUpdater) SetDescription(description string) NodeUpdater {
	u.fields[string(NodeDBSchema.Description)] = description
	return u
}

// SetDeviceClass is an autogenerated method
// nolint: dupl
func (u NodeUpdater) SetDeviceClass(deviceClass string) NodeUpdater {
	u.fields[string(NodeDBSchema.DeviceClass)] = deviceClass
	return u
}

// SetDisk is an autogenerated method
// nolint: dupl
func (u NodeUpdater) SetDisk(disk float64) NodeUpdater {
	u.fields[string(NodeDBSchema.Disk)] = disk
	return u
}

// SetExtra is an autogenerated method
// nolint: dupl
func (u NodeUpdater) SetExtra(extra string) NodeUpdater {
	u.fields[string(NodeDBSchema.Extra)] = extra
	return u
}

// SetID is an autogenerated method
// nolint: dupl
func (u NodeUpdater) SetID(ID uint) NodeUpdater {
	u.fields[string(NodeDBSchema.ID)] = ID
	return u
}

// SetIPResources is an autogenerated method
// nolint: dupl
func (u NodeUpdater) SetIPResources(iPResources float64) NodeUpdater {
	u.fields[string(NodeDBSchema.IPResources)] = iPResources
	return u
}

// SetInnerIP is an autogenerated method
// nolint: dupl
func (u NodeUpdater) SetInnerIP(innerIP string) NodeUpdater {
	u.fields[string(NodeDBSchema.InnerIP)] = innerIP
	return u
}

// SetKind is an autogenerated method
// nolint: dupl
func (u NodeUpdater) SetKind(kind string) NodeUpdater {
	u.fields[string(NodeDBSchema.Kind)] = kind
	return u
}

// SetMEM is an autogenerated method
// nolint: dupl
func (u NodeUpdater) SetMEM(mEM float64) NodeUpdater {
	u.fields[string(NodeDBSchema.MEM)] = mEM
	return u
}

// SetName is an autogenerated method
// nolint: dupl
func (u NodeUpdater) SetName(name string) NodeUpdater {
	u.fields[string(NodeDBSchema.Name)] = name
	return u
}

// SetOutterIP is an autogenerated method
// nolint: dupl
func (u NodeUpdater) SetOutterIP(outterIP string) NodeUpdater {
	u.fields[string(NodeDBSchema.OutterIP)] = outterIP
	return u
}

// SetProjectID is an autogenerated method
// nolint: dupl
func (u NodeUpdater) SetProjectID(projectID string) NodeUpdater {
	u.fields[string(NodeDBSchema.ProjectID)] = projectID
	return u
}

// SetStatus is an autogenerated method
// nolint: dupl
func (u NodeUpdater) SetStatus(status string) NodeUpdater {
	u.fields[string(NodeDBSchema.Status)] = status
	return u
}

// SetUpdatedAt is an autogenerated method
// nolint: dupl
func (u NodeUpdater) SetUpdatedAt(updatedAt time.Time) NodeUpdater {
	u.fields[string(NodeDBSchema.UpdatedAt)] = updatedAt
	return u
}

// Update is an autogenerated method
// nolint: dupl
func (u NodeUpdater) Update() error {
	return u.db.Updates(u.fields).Error
}

// UpdateNum is an autogenerated method
// nolint: dupl
func (u NodeUpdater) UpdateNum() (int64, error) {
	db := u.db.Updates(u.fields)
	return db.RowsAffected, db.Error
}

// ===== END of query set NodeQuerySet

// ===== BEGIN of Node modifiers

// NodeDBSchemaField describes database schema field. It requires for method 'Update'
type NodeDBSchemaField string

// String method returns string representation of field.
// nolint: dupl
func (f NodeDBSchemaField) String() string {
	return string(f)
}

// NodeDBSchema stores db field names of Node
var NodeDBSchema = struct {
	ID          NodeDBSchemaField
	CreatedAt   NodeDBSchemaField
	UpdatedAt   NodeDBSchemaField
	DeletedAt   NodeDBSchemaField
	Extra       NodeDBSchemaField
	Name        NodeDBSchemaField
	Creator     NodeDBSchemaField
	Description NodeDBSchemaField
	ProjectID   NodeDBSchemaField
	ClusterID   NodeDBSchemaField
	Status      NodeDBSchemaField
	Kind        NodeDBSchemaField
	InnerIP     NodeDBSchemaField
	OutterIP    NodeDBSchemaField
	DeviceClass NodeDBSchemaField
	CPU         NodeDBSchemaField
	MEM         NodeDBSchemaField
	Disk        NodeDBSchemaField
	IPResources NodeDBSchemaField
}{

	ID:          NodeDBSchemaField("id"),
	CreatedAt:   NodeDBSchemaField("created_at"),
	UpdatedAt:   NodeDBSchemaField("updated_at"),
	DeletedAt:   NodeDBSchemaField("deleted_at"),
	Extra:       NodeDBSchemaField("extra"),
	Name:        NodeDBSchemaField("name"),
	Creator:     NodeDBSchemaField("creator"),
	Description: NodeDBSchemaField("description"),
	ProjectID:   NodeDBSchemaField("project_id"),
	ClusterID:   NodeDBSchemaField("cluster_id"),
	Status:      NodeDBSchemaField("status"),
	Kind:        NodeDBSchemaField("kind"),
	InnerIP:     NodeDBSchemaField("inner_ip"),
	OutterIP:    NodeDBSchemaField("outter_ip"),
	DeviceClass: NodeDBSchemaField("device_class"),
	CPU:         NodeDBSchemaField("cpu"),
	MEM:         NodeDBSchemaField("mem"),
	Disk:        NodeDBSchemaField("disk"),
	IPResources: NodeDBSchemaField("ip_resources"),
}

// Update updates Node fields by primary key
// nolint: dupl
func (o *Node) Update(db *gorm.DB, fields ...NodeDBSchemaField) error {
	dbNameToFieldName := map[string]interface{}{
		"id":           o.ID,
		"created_at":   o.CreatedAt,
		"updated_at":   o.UpdatedAt,
		"deleted_at":   o.DeletedAt,
		"extra":        o.Extra,
		"name":         o.Name,
		"creator":      o.Creator,
		"description":  o.Description,
		"project_id":   o.ProjectID,
		"cluster_id":   o.ClusterID,
		"status":       o.Status,
		"kind":         o.Kind,
		"inner_ip":     o.InnerIP,
		"outter_ip":    o.OutterIP,
		"device_class": o.DeviceClass,
		"cpu":          o.CPU,
		"mem":          o.MEM,
		"disk":         o.Disk,
		"ip_resources": o.IPResources,
	}
	u := map[string]interface{}{}
	for _, f := range fields {
		fs := f.String()
		u[fs] = dbNameToFieldName[fs]
	}
	if err := db.Model(o).Updates(u).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return err
		}

		return fmt.Errorf("can't update Node %v fields %v: %s",
			o, fields, err)
	}

	return nil
}

// NodeUpdater is an Node updates manager
type NodeUpdater struct {
	fields map[string]interface{}
	db     *gorm.DB
}

// NewNodeUpdater creates new Node updater
// nolint: dupl
func NewNodeUpdater(db *gorm.DB) NodeUpdater {
	return NodeUpdater{
		fields: map[string]interface{}{},
		db:     db.Model(&Node{}),
	}
}

// ===== END of Node modifiers

// ===== END of all query sets
