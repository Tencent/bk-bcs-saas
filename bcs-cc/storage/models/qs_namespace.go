// Code generated by go-queryset. DO NOT EDIT.
package models

import (
	"errors"
	"fmt"
	"time"

	"github.com/jinzhu/gorm"
)

// ===== BEGIN of all query sets

// ===== BEGIN of query set KubernetesNamespaceQuerySet

// KubernetesNamespaceQuerySet is an queryset type for KubernetesNamespace
type KubernetesNamespaceQuerySet struct {
	db *gorm.DB
}

// NewKubernetesNamespaceQuerySet constructs new KubernetesNamespaceQuerySet
func NewKubernetesNamespaceQuerySet(db *gorm.DB) KubernetesNamespaceQuerySet {
	return KubernetesNamespaceQuerySet{
		db: db.Model(&KubernetesNamespace{}),
	}
}

func (qs KubernetesNamespaceQuerySet) w(db *gorm.DB) KubernetesNamespaceQuerySet {
	return NewKubernetesNamespaceQuerySet(db)
}

// Create is an autogenerated method
// nolint: dupl
func (o *KubernetesNamespace) Create(db *gorm.DB) error {
	return db.Create(o).Error
}

// Delete is an autogenerated method
// nolint: dupl
func (o *KubernetesNamespace) Delete(db *gorm.DB) error {
	return db.Delete(o).Error
}

// All is an autogenerated method
// nolint: dupl
func (qs KubernetesNamespaceQuerySet) All(ret *[]KubernetesNamespace) error {
	return qs.db.Find(ret).Error
}

// ClusterIDEq is an autogenerated method
// nolint: dupl
func (qs KubernetesNamespaceQuerySet) ClusterIDEq(clusterID string) KubernetesNamespaceQuerySet {
	return qs.w(qs.db.Where("cluster_id = ?", clusterID))
}

// ClusterIDIn is an autogenerated method
// nolint: dupl
func (qs KubernetesNamespaceQuerySet) ClusterIDIn(clusterID ...string) KubernetesNamespaceQuerySet {
	if len(clusterID) == 0 {
		qs.db.AddError(errors.New("must at least pass one clusterID in ClusterIDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("cluster_id IN (?)", clusterID))
}

// ClusterIDNe is an autogenerated method
// nolint: dupl
func (qs KubernetesNamespaceQuerySet) ClusterIDNe(clusterID string) KubernetesNamespaceQuerySet {
	return qs.w(qs.db.Where("cluster_id != ?", clusterID))
}

// ClusterIDNotIn is an autogenerated method
// nolint: dupl
func (qs KubernetesNamespaceQuerySet) ClusterIDNotIn(clusterID ...string) KubernetesNamespaceQuerySet {
	if len(clusterID) == 0 {
		qs.db.AddError(errors.New("must at least pass one clusterID in ClusterIDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("cluster_id NOT IN (?)", clusterID))
}

// Count is an autogenerated method
// nolint: dupl
func (qs KubernetesNamespaceQuerySet) Count() (int, error) {
	var count int
	err := qs.db.Count(&count).Error
	return count, err
}

// CreatedAtEq is an autogenerated method
// nolint: dupl
func (qs KubernetesNamespaceQuerySet) CreatedAtEq(createdAt time.Time) KubernetesNamespaceQuerySet {
	return qs.w(qs.db.Where("created_at = ?", createdAt))
}

// CreatedAtGt is an autogenerated method
// nolint: dupl
func (qs KubernetesNamespaceQuerySet) CreatedAtGt(createdAt time.Time) KubernetesNamespaceQuerySet {
	return qs.w(qs.db.Where("created_at > ?", createdAt))
}

// CreatedAtGte is an autogenerated method
// nolint: dupl
func (qs KubernetesNamespaceQuerySet) CreatedAtGte(createdAt time.Time) KubernetesNamespaceQuerySet {
	return qs.w(qs.db.Where("created_at >= ?", createdAt))
}

// CreatedAtLt is an autogenerated method
// nolint: dupl
func (qs KubernetesNamespaceQuerySet) CreatedAtLt(createdAt time.Time) KubernetesNamespaceQuerySet {
	return qs.w(qs.db.Where("created_at < ?", createdAt))
}

// CreatedAtLte is an autogenerated method
// nolint: dupl
func (qs KubernetesNamespaceQuerySet) CreatedAtLte(createdAt time.Time) KubernetesNamespaceQuerySet {
	return qs.w(qs.db.Where("created_at <= ?", createdAt))
}

// CreatedAtNe is an autogenerated method
// nolint: dupl
func (qs KubernetesNamespaceQuerySet) CreatedAtNe(createdAt time.Time) KubernetesNamespaceQuerySet {
	return qs.w(qs.db.Where("created_at != ?", createdAt))
}

// CreatorEq is an autogenerated method
// nolint: dupl
func (qs KubernetesNamespaceQuerySet) CreatorEq(creator string) KubernetesNamespaceQuerySet {
	return qs.w(qs.db.Where("creator = ?", creator))
}

// CreatorIn is an autogenerated method
// nolint: dupl
func (qs KubernetesNamespaceQuerySet) CreatorIn(creator ...string) KubernetesNamespaceQuerySet {
	if len(creator) == 0 {
		qs.db.AddError(errors.New("must at least pass one creator in CreatorIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("creator IN (?)", creator))
}

// CreatorNe is an autogenerated method
// nolint: dupl
func (qs KubernetesNamespaceQuerySet) CreatorNe(creator string) KubernetesNamespaceQuerySet {
	return qs.w(qs.db.Where("creator != ?", creator))
}

// CreatorNotIn is an autogenerated method
// nolint: dupl
func (qs KubernetesNamespaceQuerySet) CreatorNotIn(creator ...string) KubernetesNamespaceQuerySet {
	if len(creator) == 0 {
		qs.db.AddError(errors.New("must at least pass one creator in CreatorNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("creator NOT IN (?)", creator))
}

// Delete is an autogenerated method
// nolint: dupl
func (qs KubernetesNamespaceQuerySet) Delete() error {
	return qs.db.Delete(KubernetesNamespace{}).Error
}

// DeleteNum is an autogenerated method
// nolint: dupl
func (qs KubernetesNamespaceQuerySet) DeleteNum() (int64, error) {
	db := qs.db.Delete(KubernetesNamespace{})
	return db.RowsAffected, db.Error
}

// DeleteNumUnscoped is an autogenerated method
// nolint: dupl
func (qs KubernetesNamespaceQuerySet) DeleteNumUnscoped() (int64, error) {
	db := qs.db.Unscoped().Delete(KubernetesNamespace{})
	return db.RowsAffected, db.Error
}

// DeletedAtEq is an autogenerated method
// nolint: dupl
func (qs KubernetesNamespaceQuerySet) DeletedAtEq(deletedAt time.Time) KubernetesNamespaceQuerySet {
	return qs.w(qs.db.Where("deleted_at = ?", deletedAt))
}

// DeletedAtGt is an autogenerated method
// nolint: dupl
func (qs KubernetesNamespaceQuerySet) DeletedAtGt(deletedAt time.Time) KubernetesNamespaceQuerySet {
	return qs.w(qs.db.Where("deleted_at > ?", deletedAt))
}

// DeletedAtGte is an autogenerated method
// nolint: dupl
func (qs KubernetesNamespaceQuerySet) DeletedAtGte(deletedAt time.Time) KubernetesNamespaceQuerySet {
	return qs.w(qs.db.Where("deleted_at >= ?", deletedAt))
}

// DeletedAtIsNotNull is an autogenerated method
// nolint: dupl
func (qs KubernetesNamespaceQuerySet) DeletedAtIsNotNull() KubernetesNamespaceQuerySet {
	return qs.w(qs.db.Where("deleted_at IS NOT NULL"))
}

// DeletedAtIsNull is an autogenerated method
// nolint: dupl
func (qs KubernetesNamespaceQuerySet) DeletedAtIsNull() KubernetesNamespaceQuerySet {
	return qs.w(qs.db.Where("deleted_at IS NULL"))
}

// DeletedAtLt is an autogenerated method
// nolint: dupl
func (qs KubernetesNamespaceQuerySet) DeletedAtLt(deletedAt time.Time) KubernetesNamespaceQuerySet {
	return qs.w(qs.db.Where("deleted_at < ?", deletedAt))
}

// DeletedAtLte is an autogenerated method
// nolint: dupl
func (qs KubernetesNamespaceQuerySet) DeletedAtLte(deletedAt time.Time) KubernetesNamespaceQuerySet {
	return qs.w(qs.db.Where("deleted_at <= ?", deletedAt))
}

// DeletedAtNe is an autogenerated method
// nolint: dupl
func (qs KubernetesNamespaceQuerySet) DeletedAtNe(deletedAt time.Time) KubernetesNamespaceQuerySet {
	return qs.w(qs.db.Where("deleted_at != ?", deletedAt))
}

// DescriptionEq is an autogenerated method
// nolint: dupl
func (qs KubernetesNamespaceQuerySet) DescriptionEq(description string) KubernetesNamespaceQuerySet {
	return qs.w(qs.db.Where("description = ?", description))
}

// DescriptionIn is an autogenerated method
// nolint: dupl
func (qs KubernetesNamespaceQuerySet) DescriptionIn(description ...string) KubernetesNamespaceQuerySet {
	if len(description) == 0 {
		qs.db.AddError(errors.New("must at least pass one description in DescriptionIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("description IN (?)", description))
}

// DescriptionNe is an autogenerated method
// nolint: dupl
func (qs KubernetesNamespaceQuerySet) DescriptionNe(description string) KubernetesNamespaceQuerySet {
	return qs.w(qs.db.Where("description != ?", description))
}

// DescriptionNotIn is an autogenerated method
// nolint: dupl
func (qs KubernetesNamespaceQuerySet) DescriptionNotIn(description ...string) KubernetesNamespaceQuerySet {
	if len(description) == 0 {
		qs.db.AddError(errors.New("must at least pass one description in DescriptionNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("description NOT IN (?)", description))
}

// EnvTypeEq is an autogenerated method
// nolint: dupl
func (qs KubernetesNamespaceQuerySet) EnvTypeEq(envType string) KubernetesNamespaceQuerySet {
	return qs.w(qs.db.Where("env_type = ?", envType))
}

// EnvTypeIn is an autogenerated method
// nolint: dupl
func (qs KubernetesNamespaceQuerySet) EnvTypeIn(envType ...string) KubernetesNamespaceQuerySet {
	if len(envType) == 0 {
		qs.db.AddError(errors.New("must at least pass one envType in EnvTypeIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("env_type IN (?)", envType))
}

// EnvTypeNe is an autogenerated method
// nolint: dupl
func (qs KubernetesNamespaceQuerySet) EnvTypeNe(envType string) KubernetesNamespaceQuerySet {
	return qs.w(qs.db.Where("env_type != ?", envType))
}

// EnvTypeNotIn is an autogenerated method
// nolint: dupl
func (qs KubernetesNamespaceQuerySet) EnvTypeNotIn(envType ...string) KubernetesNamespaceQuerySet {
	if len(envType) == 0 {
		qs.db.AddError(errors.New("must at least pass one envType in EnvTypeNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("env_type NOT IN (?)", envType))
}

// ExtraEq is an autogenerated method
// nolint: dupl
func (qs KubernetesNamespaceQuerySet) ExtraEq(extra string) KubernetesNamespaceQuerySet {
	return qs.w(qs.db.Where("extra = ?", extra))
}

// ExtraIn is an autogenerated method
// nolint: dupl
func (qs KubernetesNamespaceQuerySet) ExtraIn(extra ...string) KubernetesNamespaceQuerySet {
	if len(extra) == 0 {
		qs.db.AddError(errors.New("must at least pass one extra in ExtraIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("extra IN (?)", extra))
}

// ExtraNe is an autogenerated method
// nolint: dupl
func (qs KubernetesNamespaceQuerySet) ExtraNe(extra string) KubernetesNamespaceQuerySet {
	return qs.w(qs.db.Where("extra != ?", extra))
}

// ExtraNotIn is an autogenerated method
// nolint: dupl
func (qs KubernetesNamespaceQuerySet) ExtraNotIn(extra ...string) KubernetesNamespaceQuerySet {
	if len(extra) == 0 {
		qs.db.AddError(errors.New("must at least pass one extra in ExtraNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("extra NOT IN (?)", extra))
}

// GetDB is an autogenerated method
// nolint: dupl
func (qs KubernetesNamespaceQuerySet) GetDB() *gorm.DB {
	return qs.db
}

// GetUpdater is an autogenerated method
// nolint: dupl
func (qs KubernetesNamespaceQuerySet) GetUpdater() KubernetesNamespaceUpdater {
	return NewKubernetesNamespaceUpdater(qs.db)
}

// HasImageSecretEq is an autogenerated method
// nolint: dupl
func (qs KubernetesNamespaceQuerySet) HasImageSecretEq(hasImageSecret bool) KubernetesNamespaceQuerySet {
	return qs.w(qs.db.Where("has_image_secret = ?", hasImageSecret))
}

// HasImageSecretIn is an autogenerated method
// nolint: dupl
func (qs KubernetesNamespaceQuerySet) HasImageSecretIn(hasImageSecret ...bool) KubernetesNamespaceQuerySet {
	if len(hasImageSecret) == 0 {
		qs.db.AddError(errors.New("must at least pass one hasImageSecret in HasImageSecretIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("has_image_secret IN (?)", hasImageSecret))
}

// HasImageSecretNe is an autogenerated method
// nolint: dupl
func (qs KubernetesNamespaceQuerySet) HasImageSecretNe(hasImageSecret bool) KubernetesNamespaceQuerySet {
	return qs.w(qs.db.Where("has_image_secret != ?", hasImageSecret))
}

// HasImageSecretNotIn is an autogenerated method
// nolint: dupl
func (qs KubernetesNamespaceQuerySet) HasImageSecretNotIn(hasImageSecret ...bool) KubernetesNamespaceQuerySet {
	if len(hasImageSecret) == 0 {
		qs.db.AddError(errors.New("must at least pass one hasImageSecret in HasImageSecretNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("has_image_secret NOT IN (?)", hasImageSecret))
}

// IDEq is an autogenerated method
// nolint: dupl
func (qs KubernetesNamespaceQuerySet) IDEq(ID uint) KubernetesNamespaceQuerySet {
	return qs.w(qs.db.Where("id = ?", ID))
}

// IDGt is an autogenerated method
// nolint: dupl
func (qs KubernetesNamespaceQuerySet) IDGt(ID uint) KubernetesNamespaceQuerySet {
	return qs.w(qs.db.Where("id > ?", ID))
}

// IDGte is an autogenerated method
// nolint: dupl
func (qs KubernetesNamespaceQuerySet) IDGte(ID uint) KubernetesNamespaceQuerySet {
	return qs.w(qs.db.Where("id >= ?", ID))
}

// IDIn is an autogenerated method
// nolint: dupl
func (qs KubernetesNamespaceQuerySet) IDIn(ID ...uint) KubernetesNamespaceQuerySet {
	if len(ID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ID in IDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("id IN (?)", ID))
}

// IDLt is an autogenerated method
// nolint: dupl
func (qs KubernetesNamespaceQuerySet) IDLt(ID uint) KubernetesNamespaceQuerySet {
	return qs.w(qs.db.Where("id < ?", ID))
}

// IDLte is an autogenerated method
// nolint: dupl
func (qs KubernetesNamespaceQuerySet) IDLte(ID uint) KubernetesNamespaceQuerySet {
	return qs.w(qs.db.Where("id <= ?", ID))
}

// IDNe is an autogenerated method
// nolint: dupl
func (qs KubernetesNamespaceQuerySet) IDNe(ID uint) KubernetesNamespaceQuerySet {
	return qs.w(qs.db.Where("id != ?", ID))
}

// IDNotIn is an autogenerated method
// nolint: dupl
func (qs KubernetesNamespaceQuerySet) IDNotIn(ID ...uint) KubernetesNamespaceQuerySet {
	if len(ID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ID in IDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("id NOT IN (?)", ID))
}

// Limit is an autogenerated method
// nolint: dupl
func (qs KubernetesNamespaceQuerySet) Limit(limit int) KubernetesNamespaceQuerySet {
	return qs.w(qs.db.Limit(limit))
}

// NameEq is an autogenerated method
// nolint: dupl
func (qs KubernetesNamespaceQuerySet) NameEq(name string) KubernetesNamespaceQuerySet {
	return qs.w(qs.db.Where("name = ?", name))
}

// NameIn is an autogenerated method
// nolint: dupl
func (qs KubernetesNamespaceQuerySet) NameIn(name ...string) KubernetesNamespaceQuerySet {
	if len(name) == 0 {
		qs.db.AddError(errors.New("must at least pass one name in NameIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("name IN (?)", name))
}

// NameNe is an autogenerated method
// nolint: dupl
func (qs KubernetesNamespaceQuerySet) NameNe(name string) KubernetesNamespaceQuerySet {
	return qs.w(qs.db.Where("name != ?", name))
}

// NameNotIn is an autogenerated method
// nolint: dupl
func (qs KubernetesNamespaceQuerySet) NameNotIn(name ...string) KubernetesNamespaceQuerySet {
	if len(name) == 0 {
		qs.db.AddError(errors.New("must at least pass one name in NameNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("name NOT IN (?)", name))
}

// Offset is an autogenerated method
// nolint: dupl
func (qs KubernetesNamespaceQuerySet) Offset(offset int) KubernetesNamespaceQuerySet {
	return qs.w(qs.db.Offset(offset))
}

// One is used to retrieve one result. It returns gorm.ErrRecordNotFound
// if nothing was fetched
func (qs KubernetesNamespaceQuerySet) One(ret *KubernetesNamespace) error {
	return qs.db.First(ret).Error
}

// OrderAscByCreatedAt is an autogenerated method
// nolint: dupl
func (qs KubernetesNamespaceQuerySet) OrderAscByCreatedAt() KubernetesNamespaceQuerySet {
	return qs.w(qs.db.Order("created_at ASC"))
}

// OrderAscByDeletedAt is an autogenerated method
// nolint: dupl
func (qs KubernetesNamespaceQuerySet) OrderAscByDeletedAt() KubernetesNamespaceQuerySet {
	return qs.w(qs.db.Order("deleted_at ASC"))
}

// OrderAscByID is an autogenerated method
// nolint: dupl
func (qs KubernetesNamespaceQuerySet) OrderAscByID() KubernetesNamespaceQuerySet {
	return qs.w(qs.db.Order("id ASC"))
}

// OrderAscByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs KubernetesNamespaceQuerySet) OrderAscByUpdatedAt() KubernetesNamespaceQuerySet {
	return qs.w(qs.db.Order("updated_at ASC"))
}

// OrderDescByCreatedAt is an autogenerated method
// nolint: dupl
func (qs KubernetesNamespaceQuerySet) OrderDescByCreatedAt() KubernetesNamespaceQuerySet {
	return qs.w(qs.db.Order("created_at DESC"))
}

// OrderDescByDeletedAt is an autogenerated method
// nolint: dupl
func (qs KubernetesNamespaceQuerySet) OrderDescByDeletedAt() KubernetesNamespaceQuerySet {
	return qs.w(qs.db.Order("deleted_at DESC"))
}

// OrderDescByID is an autogenerated method
// nolint: dupl
func (qs KubernetesNamespaceQuerySet) OrderDescByID() KubernetesNamespaceQuerySet {
	return qs.w(qs.db.Order("id DESC"))
}

// OrderDescByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs KubernetesNamespaceQuerySet) OrderDescByUpdatedAt() KubernetesNamespaceQuerySet {
	return qs.w(qs.db.Order("updated_at DESC"))
}

// ProjectIDEq is an autogenerated method
// nolint: dupl
func (qs KubernetesNamespaceQuerySet) ProjectIDEq(projectID string) KubernetesNamespaceQuerySet {
	return qs.w(qs.db.Where("project_id = ?", projectID))
}

// ProjectIDIn is an autogenerated method
// nolint: dupl
func (qs KubernetesNamespaceQuerySet) ProjectIDIn(projectID ...string) KubernetesNamespaceQuerySet {
	if len(projectID) == 0 {
		qs.db.AddError(errors.New("must at least pass one projectID in ProjectIDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("project_id IN (?)", projectID))
}

// ProjectIDNe is an autogenerated method
// nolint: dupl
func (qs KubernetesNamespaceQuerySet) ProjectIDNe(projectID string) KubernetesNamespaceQuerySet {
	return qs.w(qs.db.Where("project_id != ?", projectID))
}

// ProjectIDNotIn is an autogenerated method
// nolint: dupl
func (qs KubernetesNamespaceQuerySet) ProjectIDNotIn(projectID ...string) KubernetesNamespaceQuerySet {
	if len(projectID) == 0 {
		qs.db.AddError(errors.New("must at least pass one projectID in ProjectIDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("project_id NOT IN (?)", projectID))
}

// StatusEq is an autogenerated method
// nolint: dupl
func (qs KubernetesNamespaceQuerySet) StatusEq(status string) KubernetesNamespaceQuerySet {
	return qs.w(qs.db.Where("status = ?", status))
}

// StatusIn is an autogenerated method
// nolint: dupl
func (qs KubernetesNamespaceQuerySet) StatusIn(status ...string) KubernetesNamespaceQuerySet {
	if len(status) == 0 {
		qs.db.AddError(errors.New("must at least pass one status in StatusIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("status IN (?)", status))
}

// StatusNe is an autogenerated method
// nolint: dupl
func (qs KubernetesNamespaceQuerySet) StatusNe(status string) KubernetesNamespaceQuerySet {
	return qs.w(qs.db.Where("status != ?", status))
}

// StatusNotIn is an autogenerated method
// nolint: dupl
func (qs KubernetesNamespaceQuerySet) StatusNotIn(status ...string) KubernetesNamespaceQuerySet {
	if len(status) == 0 {
		qs.db.AddError(errors.New("must at least pass one status in StatusNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("status NOT IN (?)", status))
}

// UpdatedAtEq is an autogenerated method
// nolint: dupl
func (qs KubernetesNamespaceQuerySet) UpdatedAtEq(updatedAt time.Time) KubernetesNamespaceQuerySet {
	return qs.w(qs.db.Where("updated_at = ?", updatedAt))
}

// UpdatedAtGt is an autogenerated method
// nolint: dupl
func (qs KubernetesNamespaceQuerySet) UpdatedAtGt(updatedAt time.Time) KubernetesNamespaceQuerySet {
	return qs.w(qs.db.Where("updated_at > ?", updatedAt))
}

// UpdatedAtGte is an autogenerated method
// nolint: dupl
func (qs KubernetesNamespaceQuerySet) UpdatedAtGte(updatedAt time.Time) KubernetesNamespaceQuerySet {
	return qs.w(qs.db.Where("updated_at >= ?", updatedAt))
}

// UpdatedAtLt is an autogenerated method
// nolint: dupl
func (qs KubernetesNamespaceQuerySet) UpdatedAtLt(updatedAt time.Time) KubernetesNamespaceQuerySet {
	return qs.w(qs.db.Where("updated_at < ?", updatedAt))
}

// UpdatedAtLte is an autogenerated method
// nolint: dupl
func (qs KubernetesNamespaceQuerySet) UpdatedAtLte(updatedAt time.Time) KubernetesNamespaceQuerySet {
	return qs.w(qs.db.Where("updated_at <= ?", updatedAt))
}

// UpdatedAtNe is an autogenerated method
// nolint: dupl
func (qs KubernetesNamespaceQuerySet) UpdatedAtNe(updatedAt time.Time) KubernetesNamespaceQuerySet {
	return qs.w(qs.db.Where("updated_at != ?", updatedAt))
}

// SetClusterID is an autogenerated method
// nolint: dupl
func (u KubernetesNamespaceUpdater) SetClusterID(clusterID string) KubernetesNamespaceUpdater {
	u.fields[string(KubernetesNamespaceDBSchema.ClusterID)] = clusterID
	return u
}

// SetCreatedAt is an autogenerated method
// nolint: dupl
func (u KubernetesNamespaceUpdater) SetCreatedAt(createdAt time.Time) KubernetesNamespaceUpdater {
	u.fields[string(KubernetesNamespaceDBSchema.CreatedAt)] = createdAt
	return u
}

// SetCreator is an autogenerated method
// nolint: dupl
func (u KubernetesNamespaceUpdater) SetCreator(creator string) KubernetesNamespaceUpdater {
	u.fields[string(KubernetesNamespaceDBSchema.Creator)] = creator
	return u
}

// SetDeletedAt is an autogenerated method
// nolint: dupl
func (u KubernetesNamespaceUpdater) SetDeletedAt(deletedAt *time.Time) KubernetesNamespaceUpdater {
	u.fields[string(KubernetesNamespaceDBSchema.DeletedAt)] = deletedAt
	return u
}

// SetDescription is an autogenerated method
// nolint: dupl
func (u KubernetesNamespaceUpdater) SetDescription(description string) KubernetesNamespaceUpdater {
	u.fields[string(KubernetesNamespaceDBSchema.Description)] = description
	return u
}

// SetEnvType is an autogenerated method
// nolint: dupl
func (u KubernetesNamespaceUpdater) SetEnvType(envType string) KubernetesNamespaceUpdater {
	u.fields[string(KubernetesNamespaceDBSchema.EnvType)] = envType
	return u
}

// SetExtra is an autogenerated method
// nolint: dupl
func (u KubernetesNamespaceUpdater) SetExtra(extra string) KubernetesNamespaceUpdater {
	u.fields[string(KubernetesNamespaceDBSchema.Extra)] = extra
	return u
}

// SetHasImageSecret is an autogenerated method
// nolint: dupl
func (u KubernetesNamespaceUpdater) SetHasImageSecret(hasImageSecret bool) KubernetesNamespaceUpdater {
	u.fields[string(KubernetesNamespaceDBSchema.HasImageSecret)] = hasImageSecret
	return u
}

// SetID is an autogenerated method
// nolint: dupl
func (u KubernetesNamespaceUpdater) SetID(ID uint) KubernetesNamespaceUpdater {
	u.fields[string(KubernetesNamespaceDBSchema.ID)] = ID
	return u
}

// SetName is an autogenerated method
// nolint: dupl
func (u KubernetesNamespaceUpdater) SetName(name string) KubernetesNamespaceUpdater {
	u.fields[string(KubernetesNamespaceDBSchema.Name)] = name
	return u
}

// SetProjectID is an autogenerated method
// nolint: dupl
func (u KubernetesNamespaceUpdater) SetProjectID(projectID string) KubernetesNamespaceUpdater {
	u.fields[string(KubernetesNamespaceDBSchema.ProjectID)] = projectID
	return u
}

// SetStatus is an autogenerated method
// nolint: dupl
func (u KubernetesNamespaceUpdater) SetStatus(status string) KubernetesNamespaceUpdater {
	u.fields[string(KubernetesNamespaceDBSchema.Status)] = status
	return u
}

// SetUpdatedAt is an autogenerated method
// nolint: dupl
func (u KubernetesNamespaceUpdater) SetUpdatedAt(updatedAt time.Time) KubernetesNamespaceUpdater {
	u.fields[string(KubernetesNamespaceDBSchema.UpdatedAt)] = updatedAt
	return u
}

// Update is an autogenerated method
// nolint: dupl
func (u KubernetesNamespaceUpdater) Update() error {
	return u.db.Updates(u.fields).Error
}

// UpdateNum is an autogenerated method
// nolint: dupl
func (u KubernetesNamespaceUpdater) UpdateNum() (int64, error) {
	db := u.db.Updates(u.fields)
	return db.RowsAffected, db.Error
}

// ===== END of query set KubernetesNamespaceQuerySet

// ===== BEGIN of KubernetesNamespace modifiers

// KubernetesNamespaceDBSchemaField describes database schema field. It requires for method 'Update'
type KubernetesNamespaceDBSchemaField string

// String method returns string representation of field.
// nolint: dupl
func (f KubernetesNamespaceDBSchemaField) String() string {
	return string(f)
}

// KubernetesNamespaceDBSchema stores db field names of KubernetesNamespace
var KubernetesNamespaceDBSchema = struct {
	ID             KubernetesNamespaceDBSchemaField
	CreatedAt      KubernetesNamespaceDBSchemaField
	UpdatedAt      KubernetesNamespaceDBSchemaField
	DeletedAt      KubernetesNamespaceDBSchemaField
	Extra          KubernetesNamespaceDBSchemaField
	Name           KubernetesNamespaceDBSchemaField
	Creator        KubernetesNamespaceDBSchemaField
	Description    KubernetesNamespaceDBSchemaField
	ProjectID      KubernetesNamespaceDBSchemaField
	ClusterID      KubernetesNamespaceDBSchemaField
	EnvType        KubernetesNamespaceDBSchemaField
	Status         KubernetesNamespaceDBSchemaField
	HasImageSecret KubernetesNamespaceDBSchemaField
}{

	ID:             KubernetesNamespaceDBSchemaField("id"),
	CreatedAt:      KubernetesNamespaceDBSchemaField("created_at"),
	UpdatedAt:      KubernetesNamespaceDBSchemaField("updated_at"),
	DeletedAt:      KubernetesNamespaceDBSchemaField("deleted_at"),
	Extra:          KubernetesNamespaceDBSchemaField("extra"),
	Name:           KubernetesNamespaceDBSchemaField("name"),
	Creator:        KubernetesNamespaceDBSchemaField("creator"),
	Description:    KubernetesNamespaceDBSchemaField("description"),
	ProjectID:      KubernetesNamespaceDBSchemaField("project_id"),
	ClusterID:      KubernetesNamespaceDBSchemaField("cluster_id"),
	EnvType:        KubernetesNamespaceDBSchemaField("env_type"),
	Status:         KubernetesNamespaceDBSchemaField("status"),
	HasImageSecret: KubernetesNamespaceDBSchemaField("has_image_secret"),
}

// Update updates KubernetesNamespace fields by primary key
// nolint: dupl
func (o *KubernetesNamespace) Update(db *gorm.DB, fields ...KubernetesNamespaceDBSchemaField) error {
	dbNameToFieldName := map[string]interface{}{
		"id":               o.ID,
		"created_at":       o.CreatedAt,
		"updated_at":       o.UpdatedAt,
		"deleted_at":       o.DeletedAt,
		"extra":            o.Extra,
		"name":             o.Name,
		"creator":          o.Creator,
		"description":      o.Description,
		"project_id":       o.ProjectID,
		"cluster_id":       o.ClusterID,
		"env_type":         o.EnvType,
		"status":           o.Status,
		"has_image_secret": o.HasImageSecret,
	}
	u := map[string]interface{}{}
	for _, f := range fields {
		fs := f.String()
		u[fs] = dbNameToFieldName[fs]
	}
	if err := db.Model(o).Updates(u).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return err
		}

		return fmt.Errorf("can't update KubernetesNamespace %v fields %v: %s",
			o, fields, err)
	}

	return nil
}

// KubernetesNamespaceUpdater is an KubernetesNamespace updates manager
type KubernetesNamespaceUpdater struct {
	fields map[string]interface{}
	db     *gorm.DB
}

// NewKubernetesNamespaceUpdater creates new KubernetesNamespace updater
// nolint: dupl
func NewKubernetesNamespaceUpdater(db *gorm.DB) KubernetesNamespaceUpdater {
	return KubernetesNamespaceUpdater{
		fields: map[string]interface{}{},
		db:     db.Model(&KubernetesNamespace{}),
	}
}

// ===== END of KubernetesNamespace modifiers

// ===== BEGIN of query set NamespaceQuerySet

// NamespaceQuerySet is an queryset type for Namespace
type NamespaceQuerySet struct {
	db *gorm.DB
}

// NewNamespaceQuerySet constructs new NamespaceQuerySet
func NewNamespaceQuerySet(db *gorm.DB) NamespaceQuerySet {
	return NamespaceQuerySet{
		db: db.Model(&Namespace{}),
	}
}

func (qs NamespaceQuerySet) w(db *gorm.DB) NamespaceQuerySet {
	return NewNamespaceQuerySet(db)
}

// Create is an autogenerated method
// nolint: dupl
func (o *Namespace) Create(db *gorm.DB) error {
	return db.Create(o).Error
}

// Delete is an autogenerated method
// nolint: dupl
func (o *Namespace) Delete(db *gorm.DB) error {
	return db.Delete(o).Error
}

// All is an autogenerated method
// nolint: dupl
func (qs NamespaceQuerySet) All(ret *[]Namespace) error {
	return qs.db.Find(ret).Error
}

// ClusterIDEq is an autogenerated method
// nolint: dupl
func (qs NamespaceQuerySet) ClusterIDEq(clusterID string) NamespaceQuerySet {
	return qs.w(qs.db.Where("cluster_id = ?", clusterID))
}

// ClusterIDIn is an autogenerated method
// nolint: dupl
func (qs NamespaceQuerySet) ClusterIDIn(clusterID ...string) NamespaceQuerySet {
	if len(clusterID) == 0 {
		qs.db.AddError(errors.New("must at least pass one clusterID in ClusterIDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("cluster_id IN (?)", clusterID))
}

// ClusterIDNe is an autogenerated method
// nolint: dupl
func (qs NamespaceQuerySet) ClusterIDNe(clusterID string) NamespaceQuerySet {
	return qs.w(qs.db.Where("cluster_id != ?", clusterID))
}

// ClusterIDNotIn is an autogenerated method
// nolint: dupl
func (qs NamespaceQuerySet) ClusterIDNotIn(clusterID ...string) NamespaceQuerySet {
	if len(clusterID) == 0 {
		qs.db.AddError(errors.New("must at least pass one clusterID in ClusterIDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("cluster_id NOT IN (?)", clusterID))
}

// Count is an autogenerated method
// nolint: dupl
func (qs NamespaceQuerySet) Count() (int, error) {
	var count int
	err := qs.db.Count(&count).Error
	return count, err
}

// CreatedAtEq is an autogenerated method
// nolint: dupl
func (qs NamespaceQuerySet) CreatedAtEq(createdAt time.Time) NamespaceQuerySet {
	return qs.w(qs.db.Where("created_at = ?", createdAt))
}

// CreatedAtGt is an autogenerated method
// nolint: dupl
func (qs NamespaceQuerySet) CreatedAtGt(createdAt time.Time) NamespaceQuerySet {
	return qs.w(qs.db.Where("created_at > ?", createdAt))
}

// CreatedAtGte is an autogenerated method
// nolint: dupl
func (qs NamespaceQuerySet) CreatedAtGte(createdAt time.Time) NamespaceQuerySet {
	return qs.w(qs.db.Where("created_at >= ?", createdAt))
}

// CreatedAtLt is an autogenerated method
// nolint: dupl
func (qs NamespaceQuerySet) CreatedAtLt(createdAt time.Time) NamespaceQuerySet {
	return qs.w(qs.db.Where("created_at < ?", createdAt))
}

// CreatedAtLte is an autogenerated method
// nolint: dupl
func (qs NamespaceQuerySet) CreatedAtLte(createdAt time.Time) NamespaceQuerySet {
	return qs.w(qs.db.Where("created_at <= ?", createdAt))
}

// CreatedAtNe is an autogenerated method
// nolint: dupl
func (qs NamespaceQuerySet) CreatedAtNe(createdAt time.Time) NamespaceQuerySet {
	return qs.w(qs.db.Where("created_at != ?", createdAt))
}

// CreatorEq is an autogenerated method
// nolint: dupl
func (qs NamespaceQuerySet) CreatorEq(creator string) NamespaceQuerySet {
	return qs.w(qs.db.Where("creator = ?", creator))
}

// CreatorIn is an autogenerated method
// nolint: dupl
func (qs NamespaceQuerySet) CreatorIn(creator ...string) NamespaceQuerySet {
	if len(creator) == 0 {
		qs.db.AddError(errors.New("must at least pass one creator in CreatorIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("creator IN (?)", creator))
}

// CreatorNe is an autogenerated method
// nolint: dupl
func (qs NamespaceQuerySet) CreatorNe(creator string) NamespaceQuerySet {
	return qs.w(qs.db.Where("creator != ?", creator))
}

// CreatorNotIn is an autogenerated method
// nolint: dupl
func (qs NamespaceQuerySet) CreatorNotIn(creator ...string) NamespaceQuerySet {
	if len(creator) == 0 {
		qs.db.AddError(errors.New("must at least pass one creator in CreatorNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("creator NOT IN (?)", creator))
}

// Delete is an autogenerated method
// nolint: dupl
func (qs NamespaceQuerySet) Delete() error {
	return qs.db.Delete(Namespace{}).Error
}

// DeleteNum is an autogenerated method
// nolint: dupl
func (qs NamespaceQuerySet) DeleteNum() (int64, error) {
	db := qs.db.Delete(Namespace{})
	return db.RowsAffected, db.Error
}

// DeleteNumUnscoped is an autogenerated method
// nolint: dupl
func (qs NamespaceQuerySet) DeleteNumUnscoped() (int64, error) {
	db := qs.db.Unscoped().Delete(Namespace{})
	return db.RowsAffected, db.Error
}

// DeletedAtEq is an autogenerated method
// nolint: dupl
func (qs NamespaceQuerySet) DeletedAtEq(deletedAt time.Time) NamespaceQuerySet {
	return qs.w(qs.db.Where("deleted_at = ?", deletedAt))
}

// DeletedAtGt is an autogenerated method
// nolint: dupl
func (qs NamespaceQuerySet) DeletedAtGt(deletedAt time.Time) NamespaceQuerySet {
	return qs.w(qs.db.Where("deleted_at > ?", deletedAt))
}

// DeletedAtGte is an autogenerated method
// nolint: dupl
func (qs NamespaceQuerySet) DeletedAtGte(deletedAt time.Time) NamespaceQuerySet {
	return qs.w(qs.db.Where("deleted_at >= ?", deletedAt))
}

// DeletedAtIsNotNull is an autogenerated method
// nolint: dupl
func (qs NamespaceQuerySet) DeletedAtIsNotNull() NamespaceQuerySet {
	return qs.w(qs.db.Where("deleted_at IS NOT NULL"))
}

// DeletedAtIsNull is an autogenerated method
// nolint: dupl
func (qs NamespaceQuerySet) DeletedAtIsNull() NamespaceQuerySet {
	return qs.w(qs.db.Where("deleted_at IS NULL"))
}

// DeletedAtLt is an autogenerated method
// nolint: dupl
func (qs NamespaceQuerySet) DeletedAtLt(deletedAt time.Time) NamespaceQuerySet {
	return qs.w(qs.db.Where("deleted_at < ?", deletedAt))
}

// DeletedAtLte is an autogenerated method
// nolint: dupl
func (qs NamespaceQuerySet) DeletedAtLte(deletedAt time.Time) NamespaceQuerySet {
	return qs.w(qs.db.Where("deleted_at <= ?", deletedAt))
}

// DeletedAtNe is an autogenerated method
// nolint: dupl
func (qs NamespaceQuerySet) DeletedAtNe(deletedAt time.Time) NamespaceQuerySet {
	return qs.w(qs.db.Where("deleted_at != ?", deletedAt))
}

// DescriptionEq is an autogenerated method
// nolint: dupl
func (qs NamespaceQuerySet) DescriptionEq(description string) NamespaceQuerySet {
	return qs.w(qs.db.Where("description = ?", description))
}

// DescriptionIn is an autogenerated method
// nolint: dupl
func (qs NamespaceQuerySet) DescriptionIn(description ...string) NamespaceQuerySet {
	if len(description) == 0 {
		qs.db.AddError(errors.New("must at least pass one description in DescriptionIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("description IN (?)", description))
}

// DescriptionNe is an autogenerated method
// nolint: dupl
func (qs NamespaceQuerySet) DescriptionNe(description string) NamespaceQuerySet {
	return qs.w(qs.db.Where("description != ?", description))
}

// DescriptionNotIn is an autogenerated method
// nolint: dupl
func (qs NamespaceQuerySet) DescriptionNotIn(description ...string) NamespaceQuerySet {
	if len(description) == 0 {
		qs.db.AddError(errors.New("must at least pass one description in DescriptionNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("description NOT IN (?)", description))
}

// EnvTypeEq is an autogenerated method
// nolint: dupl
func (qs NamespaceQuerySet) EnvTypeEq(envType string) NamespaceQuerySet {
	return qs.w(qs.db.Where("env_type = ?", envType))
}

// EnvTypeIn is an autogenerated method
// nolint: dupl
func (qs NamespaceQuerySet) EnvTypeIn(envType ...string) NamespaceQuerySet {
	if len(envType) == 0 {
		qs.db.AddError(errors.New("must at least pass one envType in EnvTypeIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("env_type IN (?)", envType))
}

// EnvTypeNe is an autogenerated method
// nolint: dupl
func (qs NamespaceQuerySet) EnvTypeNe(envType string) NamespaceQuerySet {
	return qs.w(qs.db.Where("env_type != ?", envType))
}

// EnvTypeNotIn is an autogenerated method
// nolint: dupl
func (qs NamespaceQuerySet) EnvTypeNotIn(envType ...string) NamespaceQuerySet {
	if len(envType) == 0 {
		qs.db.AddError(errors.New("must at least pass one envType in EnvTypeNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("env_type NOT IN (?)", envType))
}

// ExtraEq is an autogenerated method
// nolint: dupl
func (qs NamespaceQuerySet) ExtraEq(extra string) NamespaceQuerySet {
	return qs.w(qs.db.Where("extra = ?", extra))
}

// ExtraIn is an autogenerated method
// nolint: dupl
func (qs NamespaceQuerySet) ExtraIn(extra ...string) NamespaceQuerySet {
	if len(extra) == 0 {
		qs.db.AddError(errors.New("must at least pass one extra in ExtraIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("extra IN (?)", extra))
}

// ExtraNe is an autogenerated method
// nolint: dupl
func (qs NamespaceQuerySet) ExtraNe(extra string) NamespaceQuerySet {
	return qs.w(qs.db.Where("extra != ?", extra))
}

// ExtraNotIn is an autogenerated method
// nolint: dupl
func (qs NamespaceQuerySet) ExtraNotIn(extra ...string) NamespaceQuerySet {
	if len(extra) == 0 {
		qs.db.AddError(errors.New("must at least pass one extra in ExtraNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("extra NOT IN (?)", extra))
}

// GetDB is an autogenerated method
// nolint: dupl
func (qs NamespaceQuerySet) GetDB() *gorm.DB {
	return qs.db
}

// GetUpdater is an autogenerated method
// nolint: dupl
func (qs NamespaceQuerySet) GetUpdater() NamespaceUpdater {
	return NewNamespaceUpdater(qs.db)
}

// HasImageSecretEq is an autogenerated method
// nolint: dupl
func (qs NamespaceQuerySet) HasImageSecretEq(hasImageSecret bool) NamespaceQuerySet {
	return qs.w(qs.db.Where("has_image_secret = ?", hasImageSecret))
}

// HasImageSecretIn is an autogenerated method
// nolint: dupl
func (qs NamespaceQuerySet) HasImageSecretIn(hasImageSecret ...bool) NamespaceQuerySet {
	if len(hasImageSecret) == 0 {
		qs.db.AddError(errors.New("must at least pass one hasImageSecret in HasImageSecretIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("has_image_secret IN (?)", hasImageSecret))
}

// HasImageSecretNe is an autogenerated method
// nolint: dupl
func (qs NamespaceQuerySet) HasImageSecretNe(hasImageSecret bool) NamespaceQuerySet {
	return qs.w(qs.db.Where("has_image_secret != ?", hasImageSecret))
}

// HasImageSecretNotIn is an autogenerated method
// nolint: dupl
func (qs NamespaceQuerySet) HasImageSecretNotIn(hasImageSecret ...bool) NamespaceQuerySet {
	if len(hasImageSecret) == 0 {
		qs.db.AddError(errors.New("must at least pass one hasImageSecret in HasImageSecretNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("has_image_secret NOT IN (?)", hasImageSecret))
}

// IDEq is an autogenerated method
// nolint: dupl
func (qs NamespaceQuerySet) IDEq(ID uint) NamespaceQuerySet {
	return qs.w(qs.db.Where("id = ?", ID))
}

// IDGt is an autogenerated method
// nolint: dupl
func (qs NamespaceQuerySet) IDGt(ID uint) NamespaceQuerySet {
	return qs.w(qs.db.Where("id > ?", ID))
}

// IDGte is an autogenerated method
// nolint: dupl
func (qs NamespaceQuerySet) IDGte(ID uint) NamespaceQuerySet {
	return qs.w(qs.db.Where("id >= ?", ID))
}

// IDIn is an autogenerated method
// nolint: dupl
func (qs NamespaceQuerySet) IDIn(ID ...uint) NamespaceQuerySet {
	if len(ID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ID in IDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("id IN (?)", ID))
}

// IDLt is an autogenerated method
// nolint: dupl
func (qs NamespaceQuerySet) IDLt(ID uint) NamespaceQuerySet {
	return qs.w(qs.db.Where("id < ?", ID))
}

// IDLte is an autogenerated method
// nolint: dupl
func (qs NamespaceQuerySet) IDLte(ID uint) NamespaceQuerySet {
	return qs.w(qs.db.Where("id <= ?", ID))
}

// IDNe is an autogenerated method
// nolint: dupl
func (qs NamespaceQuerySet) IDNe(ID uint) NamespaceQuerySet {
	return qs.w(qs.db.Where("id != ?", ID))
}

// IDNotIn is an autogenerated method
// nolint: dupl
func (qs NamespaceQuerySet) IDNotIn(ID ...uint) NamespaceQuerySet {
	if len(ID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ID in IDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("id NOT IN (?)", ID))
}

// Limit is an autogenerated method
// nolint: dupl
func (qs NamespaceQuerySet) Limit(limit int) NamespaceQuerySet {
	return qs.w(qs.db.Limit(limit))
}

// NameEq is an autogenerated method
// nolint: dupl
func (qs NamespaceQuerySet) NameEq(name string) NamespaceQuerySet {
	return qs.w(qs.db.Where("name = ?", name))
}

// NameIn is an autogenerated method
// nolint: dupl
func (qs NamespaceQuerySet) NameIn(name ...string) NamespaceQuerySet {
	if len(name) == 0 {
		qs.db.AddError(errors.New("must at least pass one name in NameIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("name IN (?)", name))
}

// NameNe is an autogenerated method
// nolint: dupl
func (qs NamespaceQuerySet) NameNe(name string) NamespaceQuerySet {
	return qs.w(qs.db.Where("name != ?", name))
}

// NameNotIn is an autogenerated method
// nolint: dupl
func (qs NamespaceQuerySet) NameNotIn(name ...string) NamespaceQuerySet {
	if len(name) == 0 {
		qs.db.AddError(errors.New("must at least pass one name in NameNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("name NOT IN (?)", name))
}

// Offset is an autogenerated method
// nolint: dupl
func (qs NamespaceQuerySet) Offset(offset int) NamespaceQuerySet {
	return qs.w(qs.db.Offset(offset))
}

// One is used to retrieve one result. It returns gorm.ErrRecordNotFound
// if nothing was fetched
func (qs NamespaceQuerySet) One(ret *Namespace) error {
	return qs.db.First(ret).Error
}

// OrderAscByCreatedAt is an autogenerated method
// nolint: dupl
func (qs NamespaceQuerySet) OrderAscByCreatedAt() NamespaceQuerySet {
	return qs.w(qs.db.Order("created_at ASC"))
}

// OrderAscByDeletedAt is an autogenerated method
// nolint: dupl
func (qs NamespaceQuerySet) OrderAscByDeletedAt() NamespaceQuerySet {
	return qs.w(qs.db.Order("deleted_at ASC"))
}

// OrderAscByID is an autogenerated method
// nolint: dupl
func (qs NamespaceQuerySet) OrderAscByID() NamespaceQuerySet {
	return qs.w(qs.db.Order("id ASC"))
}

// OrderAscByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs NamespaceQuerySet) OrderAscByUpdatedAt() NamespaceQuerySet {
	return qs.w(qs.db.Order("updated_at ASC"))
}

// OrderDescByCreatedAt is an autogenerated method
// nolint: dupl
func (qs NamespaceQuerySet) OrderDescByCreatedAt() NamespaceQuerySet {
	return qs.w(qs.db.Order("created_at DESC"))
}

// OrderDescByDeletedAt is an autogenerated method
// nolint: dupl
func (qs NamespaceQuerySet) OrderDescByDeletedAt() NamespaceQuerySet {
	return qs.w(qs.db.Order("deleted_at DESC"))
}

// OrderDescByID is an autogenerated method
// nolint: dupl
func (qs NamespaceQuerySet) OrderDescByID() NamespaceQuerySet {
	return qs.w(qs.db.Order("id DESC"))
}

// OrderDescByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs NamespaceQuerySet) OrderDescByUpdatedAt() NamespaceQuerySet {
	return qs.w(qs.db.Order("updated_at DESC"))
}

// ProjectIDEq is an autogenerated method
// nolint: dupl
func (qs NamespaceQuerySet) ProjectIDEq(projectID string) NamespaceQuerySet {
	return qs.w(qs.db.Where("project_id = ?", projectID))
}

// ProjectIDIn is an autogenerated method
// nolint: dupl
func (qs NamespaceQuerySet) ProjectIDIn(projectID ...string) NamespaceQuerySet {
	if len(projectID) == 0 {
		qs.db.AddError(errors.New("must at least pass one projectID in ProjectIDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("project_id IN (?)", projectID))
}

// ProjectIDNe is an autogenerated method
// nolint: dupl
func (qs NamespaceQuerySet) ProjectIDNe(projectID string) NamespaceQuerySet {
	return qs.w(qs.db.Where("project_id != ?", projectID))
}

// ProjectIDNotIn is an autogenerated method
// nolint: dupl
func (qs NamespaceQuerySet) ProjectIDNotIn(projectID ...string) NamespaceQuerySet {
	if len(projectID) == 0 {
		qs.db.AddError(errors.New("must at least pass one projectID in ProjectIDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("project_id NOT IN (?)", projectID))
}

// StatusEq is an autogenerated method
// nolint: dupl
func (qs NamespaceQuerySet) StatusEq(status string) NamespaceQuerySet {
	return qs.w(qs.db.Where("status = ?", status))
}

// StatusIn is an autogenerated method
// nolint: dupl
func (qs NamespaceQuerySet) StatusIn(status ...string) NamespaceQuerySet {
	if len(status) == 0 {
		qs.db.AddError(errors.New("must at least pass one status in StatusIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("status IN (?)", status))
}

// StatusNe is an autogenerated method
// nolint: dupl
func (qs NamespaceQuerySet) StatusNe(status string) NamespaceQuerySet {
	return qs.w(qs.db.Where("status != ?", status))
}

// StatusNotIn is an autogenerated method
// nolint: dupl
func (qs NamespaceQuerySet) StatusNotIn(status ...string) NamespaceQuerySet {
	if len(status) == 0 {
		qs.db.AddError(errors.New("must at least pass one status in StatusNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("status NOT IN (?)", status))
}

// UpdatedAtEq is an autogenerated method
// nolint: dupl
func (qs NamespaceQuerySet) UpdatedAtEq(updatedAt time.Time) NamespaceQuerySet {
	return qs.w(qs.db.Where("updated_at = ?", updatedAt))
}

// UpdatedAtGt is an autogenerated method
// nolint: dupl
func (qs NamespaceQuerySet) UpdatedAtGt(updatedAt time.Time) NamespaceQuerySet {
	return qs.w(qs.db.Where("updated_at > ?", updatedAt))
}

// UpdatedAtGte is an autogenerated method
// nolint: dupl
func (qs NamespaceQuerySet) UpdatedAtGte(updatedAt time.Time) NamespaceQuerySet {
	return qs.w(qs.db.Where("updated_at >= ?", updatedAt))
}

// UpdatedAtLt is an autogenerated method
// nolint: dupl
func (qs NamespaceQuerySet) UpdatedAtLt(updatedAt time.Time) NamespaceQuerySet {
	return qs.w(qs.db.Where("updated_at < ?", updatedAt))
}

// UpdatedAtLte is an autogenerated method
// nolint: dupl
func (qs NamespaceQuerySet) UpdatedAtLte(updatedAt time.Time) NamespaceQuerySet {
	return qs.w(qs.db.Where("updated_at <= ?", updatedAt))
}

// UpdatedAtNe is an autogenerated method
// nolint: dupl
func (qs NamespaceQuerySet) UpdatedAtNe(updatedAt time.Time) NamespaceQuerySet {
	return qs.w(qs.db.Where("updated_at != ?", updatedAt))
}

// SetClusterID is an autogenerated method
// nolint: dupl
func (u NamespaceUpdater) SetClusterID(clusterID string) NamespaceUpdater {
	u.fields[string(NamespaceDBSchema.ClusterID)] = clusterID
	return u
}

// SetCreatedAt is an autogenerated method
// nolint: dupl
func (u NamespaceUpdater) SetCreatedAt(createdAt time.Time) NamespaceUpdater {
	u.fields[string(NamespaceDBSchema.CreatedAt)] = createdAt
	return u
}

// SetCreator is an autogenerated method
// nolint: dupl
func (u NamespaceUpdater) SetCreator(creator string) NamespaceUpdater {
	u.fields[string(NamespaceDBSchema.Creator)] = creator
	return u
}

// SetDeletedAt is an autogenerated method
// nolint: dupl
func (u NamespaceUpdater) SetDeletedAt(deletedAt *time.Time) NamespaceUpdater {
	u.fields[string(NamespaceDBSchema.DeletedAt)] = deletedAt
	return u
}

// SetDescription is an autogenerated method
// nolint: dupl
func (u NamespaceUpdater) SetDescription(description string) NamespaceUpdater {
	u.fields[string(NamespaceDBSchema.Description)] = description
	return u
}

// SetEnvType is an autogenerated method
// nolint: dupl
func (u NamespaceUpdater) SetEnvType(envType string) NamespaceUpdater {
	u.fields[string(NamespaceDBSchema.EnvType)] = envType
	return u
}

// SetExtra is an autogenerated method
// nolint: dupl
func (u NamespaceUpdater) SetExtra(extra string) NamespaceUpdater {
	u.fields[string(NamespaceDBSchema.Extra)] = extra
	return u
}

// SetHasImageSecret is an autogenerated method
// nolint: dupl
func (u NamespaceUpdater) SetHasImageSecret(hasImageSecret bool) NamespaceUpdater {
	u.fields[string(NamespaceDBSchema.HasImageSecret)] = hasImageSecret
	return u
}

// SetID is an autogenerated method
// nolint: dupl
func (u NamespaceUpdater) SetID(ID uint) NamespaceUpdater {
	u.fields[string(NamespaceDBSchema.ID)] = ID
	return u
}

// SetName is an autogenerated method
// nolint: dupl
func (u NamespaceUpdater) SetName(name string) NamespaceUpdater {
	u.fields[string(NamespaceDBSchema.Name)] = name
	return u
}

// SetProjectID is an autogenerated method
// nolint: dupl
func (u NamespaceUpdater) SetProjectID(projectID string) NamespaceUpdater {
	u.fields[string(NamespaceDBSchema.ProjectID)] = projectID
	return u
}

// SetStatus is an autogenerated method
// nolint: dupl
func (u NamespaceUpdater) SetStatus(status string) NamespaceUpdater {
	u.fields[string(NamespaceDBSchema.Status)] = status
	return u
}

// SetUpdatedAt is an autogenerated method
// nolint: dupl
func (u NamespaceUpdater) SetUpdatedAt(updatedAt time.Time) NamespaceUpdater {
	u.fields[string(NamespaceDBSchema.UpdatedAt)] = updatedAt
	return u
}

// Update is an autogenerated method
// nolint: dupl
func (u NamespaceUpdater) Update() error {
	return u.db.Updates(u.fields).Error
}

// UpdateNum is an autogenerated method
// nolint: dupl
func (u NamespaceUpdater) UpdateNum() (int64, error) {
	db := u.db.Updates(u.fields)
	return db.RowsAffected, db.Error
}

// ===== END of query set NamespaceQuerySet

// ===== BEGIN of Namespace modifiers

// NamespaceDBSchemaField describes database schema field. It requires for method 'Update'
type NamespaceDBSchemaField string

// String method returns string representation of field.
// nolint: dupl
func (f NamespaceDBSchemaField) String() string {
	return string(f)
}

// NamespaceDBSchema stores db field names of Namespace
var NamespaceDBSchema = struct {
	ID             NamespaceDBSchemaField
	CreatedAt      NamespaceDBSchemaField
	UpdatedAt      NamespaceDBSchemaField
	DeletedAt      NamespaceDBSchemaField
	Extra          NamespaceDBSchemaField
	Name           NamespaceDBSchemaField
	Creator        NamespaceDBSchemaField
	Description    NamespaceDBSchemaField
	ProjectID      NamespaceDBSchemaField
	ClusterID      NamespaceDBSchemaField
	EnvType        NamespaceDBSchemaField
	Status         NamespaceDBSchemaField
	HasImageSecret NamespaceDBSchemaField
}{

	ID:             NamespaceDBSchemaField("id"),
	CreatedAt:      NamespaceDBSchemaField("created_at"),
	UpdatedAt:      NamespaceDBSchemaField("updated_at"),
	DeletedAt:      NamespaceDBSchemaField("deleted_at"),
	Extra:          NamespaceDBSchemaField("extra"),
	Name:           NamespaceDBSchemaField("name"),
	Creator:        NamespaceDBSchemaField("creator"),
	Description:    NamespaceDBSchemaField("description"),
	ProjectID:      NamespaceDBSchemaField("project_id"),
	ClusterID:      NamespaceDBSchemaField("cluster_id"),
	EnvType:        NamespaceDBSchemaField("env_type"),
	Status:         NamespaceDBSchemaField("status"),
	HasImageSecret: NamespaceDBSchemaField("has_image_secret"),
}

// Update updates Namespace fields by primary key
// nolint: dupl
func (o *Namespace) Update(db *gorm.DB, fields ...NamespaceDBSchemaField) error {
	dbNameToFieldName := map[string]interface{}{
		"id":               o.ID,
		"created_at":       o.CreatedAt,
		"updated_at":       o.UpdatedAt,
		"deleted_at":       o.DeletedAt,
		"extra":            o.Extra,
		"name":             o.Name,
		"creator":          o.Creator,
		"description":      o.Description,
		"project_id":       o.ProjectID,
		"cluster_id":       o.ClusterID,
		"env_type":         o.EnvType,
		"status":           o.Status,
		"has_image_secret": o.HasImageSecret,
	}
	u := map[string]interface{}{}
	for _, f := range fields {
		fs := f.String()
		u[fs] = dbNameToFieldName[fs]
	}
	if err := db.Model(o).Updates(u).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return err
		}

		return fmt.Errorf("can't update Namespace %v fields %v: %s",
			o, fields, err)
	}

	return nil
}

// NamespaceUpdater is an Namespace updates manager
type NamespaceUpdater struct {
	fields map[string]interface{}
	db     *gorm.DB
}

// NewNamespaceUpdater creates new Namespace updater
// nolint: dupl
func NewNamespaceUpdater(db *gorm.DB) NamespaceUpdater {
	return NamespaceUpdater{
		fields: map[string]interface{}{},
		db:     db.Model(&Namespace{}),
	}
}

// ===== END of Namespace modifiers

// ===== END of all query sets
