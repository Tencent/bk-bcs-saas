// Code generated by go-queryset. DO NOT EDIT.
package models

import (
	"errors"
	"fmt"
	"time"

	"github.com/jinzhu/gorm"
)

// ===== BEGIN of all query sets

// ===== BEGIN of query set BcsServiceConfigQuerySet

// BcsServiceConfigQuerySet is an queryset type for BcsServiceConfig
type BcsServiceConfigQuerySet struct {
	db *gorm.DB
}

// NewBcsServiceConfigQuerySet constructs new BcsServiceConfigQuerySet
func NewBcsServiceConfigQuerySet(db *gorm.DB) BcsServiceConfigQuerySet {
	return BcsServiceConfigQuerySet{
		db: db.Model(&BcsServiceConfig{}),
	}
}

func (qs BcsServiceConfigQuerySet) w(db *gorm.DB) BcsServiceConfigQuerySet {
	return NewBcsServiceConfigQuerySet(db)
}

// Create is an autogenerated method
// nolint: dupl
func (o *BcsServiceConfig) Create(db *gorm.DB) error {
	return db.Create(o).Error
}

// Delete is an autogenerated method
// nolint: dupl
func (o *BcsServiceConfig) Delete(db *gorm.DB) error {
	return db.Delete(o).Error
}

// All is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfigQuerySet) All(ret *[]BcsServiceConfig) error {
	return qs.db.Find(ret).Error
}

// ConfigEq is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfigQuerySet) ConfigEq(config string) BcsServiceConfigQuerySet {
	return qs.w(qs.db.Where("config = ?", config))
}

// ConfigIn is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfigQuerySet) ConfigIn(config ...string) BcsServiceConfigQuerySet {
	if len(config) == 0 {
		qs.db.AddError(errors.New("must at least pass one config in ConfigIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("config IN (?)", config))
}

// ConfigNe is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfigQuerySet) ConfigNe(config string) BcsServiceConfigQuerySet {
	return qs.w(qs.db.Where("config != ?", config))
}

// ConfigNotIn is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfigQuerySet) ConfigNotIn(config ...string) BcsServiceConfigQuerySet {
	if len(config) == 0 {
		qs.db.AddError(errors.New("must at least pass one config in ConfigNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("config NOT IN (?)", config))
}

// Count is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfigQuerySet) Count() (int, error) {
	var count int
	err := qs.db.Count(&count).Error
	return count, err
}

// CreatedAtEq is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfigQuerySet) CreatedAtEq(createdAt time.Time) BcsServiceConfigQuerySet {
	return qs.w(qs.db.Where("created_at = ?", createdAt))
}

// CreatedAtGt is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfigQuerySet) CreatedAtGt(createdAt time.Time) BcsServiceConfigQuerySet {
	return qs.w(qs.db.Where("created_at > ?", createdAt))
}

// CreatedAtGte is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfigQuerySet) CreatedAtGte(createdAt time.Time) BcsServiceConfigQuerySet {
	return qs.w(qs.db.Where("created_at >= ?", createdAt))
}

// CreatedAtLt is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfigQuerySet) CreatedAtLt(createdAt time.Time) BcsServiceConfigQuerySet {
	return qs.w(qs.db.Where("created_at < ?", createdAt))
}

// CreatedAtLte is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfigQuerySet) CreatedAtLte(createdAt time.Time) BcsServiceConfigQuerySet {
	return qs.w(qs.db.Where("created_at <= ?", createdAt))
}

// CreatedAtNe is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfigQuerySet) CreatedAtNe(createdAt time.Time) BcsServiceConfigQuerySet {
	return qs.w(qs.db.Where("created_at != ?", createdAt))
}

// CreatorEq is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfigQuerySet) CreatorEq(creator string) BcsServiceConfigQuerySet {
	return qs.w(qs.db.Where("creator = ?", creator))
}

// CreatorIn is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfigQuerySet) CreatorIn(creator ...string) BcsServiceConfigQuerySet {
	if len(creator) == 0 {
		qs.db.AddError(errors.New("must at least pass one creator in CreatorIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("creator IN (?)", creator))
}

// CreatorNe is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfigQuerySet) CreatorNe(creator string) BcsServiceConfigQuerySet {
	return qs.w(qs.db.Where("creator != ?", creator))
}

// CreatorNotIn is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfigQuerySet) CreatorNotIn(creator ...string) BcsServiceConfigQuerySet {
	if len(creator) == 0 {
		qs.db.AddError(errors.New("must at least pass one creator in CreatorNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("creator NOT IN (?)", creator))
}

// Delete is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfigQuerySet) Delete() error {
	return qs.db.Delete(BcsServiceConfig{}).Error
}

// DeleteNum is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfigQuerySet) DeleteNum() (int64, error) {
	db := qs.db.Delete(BcsServiceConfig{})
	return db.RowsAffected, db.Error
}

// DeleteNumUnscoped is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfigQuerySet) DeleteNumUnscoped() (int64, error) {
	db := qs.db.Unscoped().Delete(BcsServiceConfig{})
	return db.RowsAffected, db.Error
}

// DeletedAtEq is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfigQuerySet) DeletedAtEq(deletedAt time.Time) BcsServiceConfigQuerySet {
	return qs.w(qs.db.Where("deleted_at = ?", deletedAt))
}

// DeletedAtGt is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfigQuerySet) DeletedAtGt(deletedAt time.Time) BcsServiceConfigQuerySet {
	return qs.w(qs.db.Where("deleted_at > ?", deletedAt))
}

// DeletedAtGte is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfigQuerySet) DeletedAtGte(deletedAt time.Time) BcsServiceConfigQuerySet {
	return qs.w(qs.db.Where("deleted_at >= ?", deletedAt))
}

// DeletedAtIsNotNull is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfigQuerySet) DeletedAtIsNotNull() BcsServiceConfigQuerySet {
	return qs.w(qs.db.Where("deleted_at IS NOT NULL"))
}

// DeletedAtIsNull is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfigQuerySet) DeletedAtIsNull() BcsServiceConfigQuerySet {
	return qs.w(qs.db.Where("deleted_at IS NULL"))
}

// DeletedAtLt is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfigQuerySet) DeletedAtLt(deletedAt time.Time) BcsServiceConfigQuerySet {
	return qs.w(qs.db.Where("deleted_at < ?", deletedAt))
}

// DeletedAtLte is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfigQuerySet) DeletedAtLte(deletedAt time.Time) BcsServiceConfigQuerySet {
	return qs.w(qs.db.Where("deleted_at <= ?", deletedAt))
}

// DeletedAtNe is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfigQuerySet) DeletedAtNe(deletedAt time.Time) BcsServiceConfigQuerySet {
	return qs.w(qs.db.Where("deleted_at != ?", deletedAt))
}

// DescriptionEq is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfigQuerySet) DescriptionEq(description string) BcsServiceConfigQuerySet {
	return qs.w(qs.db.Where("description = ?", description))
}

// DescriptionIn is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfigQuerySet) DescriptionIn(description ...string) BcsServiceConfigQuerySet {
	if len(description) == 0 {
		qs.db.AddError(errors.New("must at least pass one description in DescriptionIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("description IN (?)", description))
}

// DescriptionNe is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfigQuerySet) DescriptionNe(description string) BcsServiceConfigQuerySet {
	return qs.w(qs.db.Where("description != ?", description))
}

// DescriptionNotIn is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfigQuerySet) DescriptionNotIn(description ...string) BcsServiceConfigQuerySet {
	if len(description) == 0 {
		qs.db.AddError(errors.New("must at least pass one description in DescriptionNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("description NOT IN (?)", description))
}

// EnvironmentEq is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfigQuerySet) EnvironmentEq(environment string) BcsServiceConfigQuerySet {
	if environment == "" {
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("environment = ?", environment))
}

// EnvironmentIn is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfigQuerySet) EnvironmentIn(environment ...string) BcsServiceConfigQuerySet {
	if len(environment) == 0 {
		qs.db.AddError(errors.New("must at least pass one environment in EnvironmentIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("environment IN (?)", environment))
}

// EnvironmentNe is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfigQuerySet) EnvironmentNe(environment string) BcsServiceConfigQuerySet {
	return qs.w(qs.db.Where("environment != ?", environment))
}

// EnvironmentNotIn is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfigQuerySet) EnvironmentNotIn(environment ...string) BcsServiceConfigQuerySet {
	if len(environment) == 0 {
		qs.db.AddError(errors.New("must at least pass one environment in EnvironmentNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("environment NOT IN (?)", environment))
}

// ExtraEq is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfigQuerySet) ExtraEq(extra string) BcsServiceConfigQuerySet {
	return qs.w(qs.db.Where("extra = ?", extra))
}

// ExtraIn is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfigQuerySet) ExtraIn(extra ...string) BcsServiceConfigQuerySet {
	if len(extra) == 0 {
		qs.db.AddError(errors.New("must at least pass one extra in ExtraIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("extra IN (?)", extra))
}

// ExtraNe is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfigQuerySet) ExtraNe(extra string) BcsServiceConfigQuerySet {
	return qs.w(qs.db.Where("extra != ?", extra))
}

// ExtraNotIn is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfigQuerySet) ExtraNotIn(extra ...string) BcsServiceConfigQuerySet {
	if len(extra) == 0 {
		qs.db.AddError(errors.New("must at least pass one extra in ExtraNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("extra NOT IN (?)", extra))
}

// GetDB is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfigQuerySet) GetDB() *gorm.DB {
	return qs.db
}

// GetUpdater is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfigQuerySet) GetUpdater() BcsServiceConfigUpdater {
	return NewBcsServiceConfigUpdater(qs.db)
}

// IDEq is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfigQuerySet) IDEq(ID uint) BcsServiceConfigQuerySet {
	return qs.w(qs.db.Where("id = ?", ID))
}

// IDGt is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfigQuerySet) IDGt(ID uint) BcsServiceConfigQuerySet {
	return qs.w(qs.db.Where("id > ?", ID))
}

// IDGte is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfigQuerySet) IDGte(ID uint) BcsServiceConfigQuerySet {
	return qs.w(qs.db.Where("id >= ?", ID))
}

// IDIn is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfigQuerySet) IDIn(ID ...uint) BcsServiceConfigQuerySet {
	if len(ID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ID in IDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("id IN (?)", ID))
}

// IDLt is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfigQuerySet) IDLt(ID uint) BcsServiceConfigQuerySet {
	return qs.w(qs.db.Where("id < ?", ID))
}

// IDLte is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfigQuerySet) IDLte(ID uint) BcsServiceConfigQuerySet {
	return qs.w(qs.db.Where("id <= ?", ID))
}

// IDNe is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfigQuerySet) IDNe(ID uint) BcsServiceConfigQuerySet {
	return qs.w(qs.db.Where("id != ?", ID))
}

// IDNotIn is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfigQuerySet) IDNotIn(ID ...uint) BcsServiceConfigQuerySet {
	if len(ID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ID in IDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("id NOT IN (?)", ID))
}

// KindNameEq is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfigQuerySet) KindNameEq(kindName string) BcsServiceConfigQuerySet {
	if kindName == "" {
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("kind_name = ?", kindName))
}

// KindNameIn is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfigQuerySet) KindNameIn(kindName ...string) BcsServiceConfigQuerySet {
	if len(kindName) == 0 {
		qs.db.AddError(errors.New("must at least pass one kindName in KindNameIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("kind_name IN (?)", kindName))
}

// KindNameNe is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfigQuerySet) KindNameNe(kindName string) BcsServiceConfigQuerySet {
	return qs.w(qs.db.Where("kind_name != ?", kindName))
}

// KindNameNotIn is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfigQuerySet) KindNameNotIn(kindName ...string) BcsServiceConfigQuerySet {
	if len(kindName) == 0 {
		qs.db.AddError(errors.New("must at least pass one kindName in KindNameNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("kind_name NOT IN (?)", kindName))
}

// Limit is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfigQuerySet) Limit(limit int) BcsServiceConfigQuerySet {
	return qs.w(qs.db.Limit(limit))
}

// Offset is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfigQuerySet) Offset(offset int) BcsServiceConfigQuerySet {
	return qs.w(qs.db.Offset(offset))
}

// One is used to retrieve one result. It returns gorm.ErrRecordNotFound
// if nothing was fetched
func (qs BcsServiceConfigQuerySet) One(ret *BcsServiceConfig) error {
	return qs.db.First(ret).Error
}

// OrderAscByCreatedAt is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfigQuerySet) OrderAscByCreatedAt() BcsServiceConfigQuerySet {
	return qs.w(qs.db.Order("created_at ASC"))
}

// OrderAscByDeletedAt is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfigQuerySet) OrderAscByDeletedAt() BcsServiceConfigQuerySet {
	return qs.w(qs.db.Order("deleted_at ASC"))
}

// OrderAscByID is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfigQuerySet) OrderAscByID() BcsServiceConfigQuerySet {
	return qs.w(qs.db.Order("id ASC"))
}

// OrderAscByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfigQuerySet) OrderAscByUpdatedAt() BcsServiceConfigQuerySet {
	return qs.w(qs.db.Order("updated_at ASC"))
}

// OrderDescByCreatedAt is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfigQuerySet) OrderDescByCreatedAt() BcsServiceConfigQuerySet {
	return qs.w(qs.db.Order("created_at DESC"))
}

// OrderDescByDeletedAt is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfigQuerySet) OrderDescByDeletedAt() BcsServiceConfigQuerySet {
	return qs.w(qs.db.Order("deleted_at DESC"))
}

// OrderDescByID is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfigQuerySet) OrderDescByID() BcsServiceConfigQuerySet {
	return qs.w(qs.db.Order("id DESC"))
}

// OrderDescByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfigQuerySet) OrderDescByUpdatedAt() BcsServiceConfigQuerySet {
	return qs.w(qs.db.Order("updated_at DESC"))
}

// UpdatedAtEq is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfigQuerySet) UpdatedAtEq(updatedAt time.Time) BcsServiceConfigQuerySet {
	return qs.w(qs.db.Where("updated_at = ?", updatedAt))
}

// UpdatedAtGt is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfigQuerySet) UpdatedAtGt(updatedAt time.Time) BcsServiceConfigQuerySet {
	return qs.w(qs.db.Where("updated_at > ?", updatedAt))
}

// UpdatedAtGte is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfigQuerySet) UpdatedAtGte(updatedAt time.Time) BcsServiceConfigQuerySet {
	return qs.w(qs.db.Where("updated_at >= ?", updatedAt))
}

// UpdatedAtLt is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfigQuerySet) UpdatedAtLt(updatedAt time.Time) BcsServiceConfigQuerySet {
	return qs.w(qs.db.Where("updated_at < ?", updatedAt))
}

// UpdatedAtLte is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfigQuerySet) UpdatedAtLte(updatedAt time.Time) BcsServiceConfigQuerySet {
	return qs.w(qs.db.Where("updated_at <= ?", updatedAt))
}

// UpdatedAtNe is an autogenerated method
// nolint: dupl
func (qs BcsServiceConfigQuerySet) UpdatedAtNe(updatedAt time.Time) BcsServiceConfigQuerySet {
	return qs.w(qs.db.Where("updated_at != ?", updatedAt))
}

// SetConfig is an autogenerated method
// nolint: dupl
func (u BcsServiceConfigUpdater) SetConfig(config string) BcsServiceConfigUpdater {
	u.fields[string(BcsServiceConfigDBSchema.Config)] = config
	return u
}

// SetCreatedAt is an autogenerated method
// nolint: dupl
func (u BcsServiceConfigUpdater) SetCreatedAt(createdAt time.Time) BcsServiceConfigUpdater {
	u.fields[string(BcsServiceConfigDBSchema.CreatedAt)] = createdAt
	return u
}

// SetCreator is an autogenerated method
// nolint: dupl
func (u BcsServiceConfigUpdater) SetCreator(creator string) BcsServiceConfigUpdater {
	u.fields[string(BcsServiceConfigDBSchema.Creator)] = creator
	return u
}

// SetDeletedAt is an autogenerated method
// nolint: dupl
func (u BcsServiceConfigUpdater) SetDeletedAt(deletedAt *time.Time) BcsServiceConfigUpdater {
	u.fields[string(BcsServiceConfigDBSchema.DeletedAt)] = deletedAt
	return u
}

// SetDescription is an autogenerated method
// nolint: dupl
func (u BcsServiceConfigUpdater) SetDescription(description string) BcsServiceConfigUpdater {
	u.fields[string(BcsServiceConfigDBSchema.Description)] = description
	return u
}

// SetEnvironment is an autogenerated method
// nolint: dupl
func (u BcsServiceConfigUpdater) SetEnvironment(environment string) BcsServiceConfigUpdater {
	u.fields[string(BcsServiceConfigDBSchema.Environment)] = environment
	return u
}

// SetExtra is an autogenerated method
// nolint: dupl
func (u BcsServiceConfigUpdater) SetExtra(extra string) BcsServiceConfigUpdater {
	u.fields[string(BcsServiceConfigDBSchema.Extra)] = extra
	return u
}

// SetID is an autogenerated method
// nolint: dupl
func (u BcsServiceConfigUpdater) SetID(ID uint) BcsServiceConfigUpdater {
	u.fields[string(BcsServiceConfigDBSchema.ID)] = ID
	return u
}

// SetKindName is an autogenerated method
// nolint: dupl
func (u BcsServiceConfigUpdater) SetKindName(kindName string) BcsServiceConfigUpdater {
	u.fields[string(BcsServiceConfigDBSchema.KindName)] = kindName
	return u
}

// SetUpdatedAt is an autogenerated method
// nolint: dupl
func (u BcsServiceConfigUpdater) SetUpdatedAt(updatedAt time.Time) BcsServiceConfigUpdater {
	u.fields[string(BcsServiceConfigDBSchema.UpdatedAt)] = updatedAt
	return u
}

// Update is an autogenerated method
// nolint: dupl
func (u BcsServiceConfigUpdater) Update() error {
	return u.db.Updates(u.fields).Error
}

// UpdateNum is an autogenerated method
// nolint: dupl
func (u BcsServiceConfigUpdater) UpdateNum() (int64, error) {
	db := u.db.Updates(u.fields)
	return db.RowsAffected, db.Error
}

// ===== END of query set BcsServiceConfigQuerySet

// ===== BEGIN of BcsServiceConfig modifiers

// BcsServiceConfigDBSchemaField describes database schema field. It requires for method 'Update'
type BcsServiceConfigDBSchemaField string

// String method returns string representation of field.
// nolint: dupl
func (f BcsServiceConfigDBSchemaField) String() string {
	return string(f)
}

// BcsServiceConfigDBSchema stores db field names of BcsServiceConfig
var BcsServiceConfigDBSchema = struct {
	ID          BcsServiceConfigDBSchemaField
	CreatedAt   BcsServiceConfigDBSchemaField
	UpdatedAt   BcsServiceConfigDBSchemaField
	DeletedAt   BcsServiceConfigDBSchemaField
	Extra       BcsServiceConfigDBSchemaField
	KindName    BcsServiceConfigDBSchemaField
	Environment BcsServiceConfigDBSchemaField
	Description BcsServiceConfigDBSchemaField
	Config      BcsServiceConfigDBSchemaField
	Creator     BcsServiceConfigDBSchemaField
}{

	ID:          BcsServiceConfigDBSchemaField("id"),
	CreatedAt:   BcsServiceConfigDBSchemaField("created_at"),
	UpdatedAt:   BcsServiceConfigDBSchemaField("updated_at"),
	DeletedAt:   BcsServiceConfigDBSchemaField("deleted_at"),
	Extra:       BcsServiceConfigDBSchemaField("extra"),
	KindName:    BcsServiceConfigDBSchemaField("kind_name"),
	Environment: BcsServiceConfigDBSchemaField("environment"),
	Description: BcsServiceConfigDBSchemaField("description"),
	Config:      BcsServiceConfigDBSchemaField("config"),
	Creator:     BcsServiceConfigDBSchemaField("creator"),
}

// Update updates BcsServiceConfig fields by primary key
// nolint: dupl
func (o *BcsServiceConfig) Update(db *gorm.DB, fields ...BcsServiceConfigDBSchemaField) error {
	dbNameToFieldName := map[string]interface{}{
		"id":          o.ID,
		"created_at":  o.CreatedAt,
		"updated_at":  o.UpdatedAt,
		"deleted_at":  o.DeletedAt,
		"extra":       o.Extra,
		"kind_name":   o.KindName,
		"environment": o.Environment,
		"description": o.Description,
		"config":      o.Config,
		"creator":     o.Creator,
	}
	u := map[string]interface{}{}
	for _, f := range fields {
		fs := f.String()
		u[fs] = dbNameToFieldName[fs]
	}
	if err := db.Model(o).Updates(u).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return err
		}

		return fmt.Errorf("can't update BcsServiceConfig %v fields %v: %s",
			o, fields, err)
	}

	return nil
}

// BcsServiceConfigUpdater is an BcsServiceConfig updates manager
type BcsServiceConfigUpdater struct {
	fields map[string]interface{}
	db     *gorm.DB
}

// NewBcsServiceConfigUpdater creates new BcsServiceConfig updater
// nolint: dupl
func NewBcsServiceConfigUpdater(db *gorm.DB) BcsServiceConfigUpdater {
	return BcsServiceConfigUpdater{
		fields: map[string]interface{}{},
		db:     db.Model(&BcsServiceConfig{}),
	}
}

// ===== END of BcsServiceConfig modifiers

// ===== END of all query sets
